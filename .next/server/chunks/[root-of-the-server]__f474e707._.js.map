{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/claude-api.ts"],"sourcesContent":["interface ClaudeMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\ninterface ClaudeRequest {\n  model: string;\n  max_tokens: number;\n  messages: ClaudeMessage[];\n}\n\ninterface ClaudeResponse {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\nexport async function callClaudeAPI(prompt: string): Promise<string> {\n  const apiKey = process.env.CLAUDE_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('CLAUDE_API_KEY environment variable is not set');\n  }\n\n  const requestBody: ClaudeRequest = {\n    model: 'claude-3-5-sonnet-20241022',\n    max_tokens: 1000,\n    messages: [\n      {\n        role: 'user',\n        content: prompt\n      }\n    ]\n  };\n\n  try {\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Claude API error: ${response.status} - ${errorText}`);\n    }\n\n    const data: ClaudeResponse = await response.json();\n    \n    // Extract the text content from the response\n    const textContent = data.content.find(content => content.type === 'text');\n    \n    if (!textContent) {\n      throw new Error('No text content found in Claude API response');\n    }\n\n    return textContent.text;\n\n  } catch (error) {\n    console.error('Error calling Claude API:', error);\n    throw error;\n  }\n}\n\n// Utility function to test the API connection\nexport async function testClaudeConnection(): Promise<boolean> {\n  try {\n    const response = await callClaudeAPI('Hello, this is a test message.');\n    return response.length > 0;\n  } catch (error) {\n    console.error('Claude API connection test failed:', error);\n    return false;\n  }\n} "],"names":[],"mappings":";;;;AAsBO,eAAe,cAAc,MAAc;IAChD,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IAEzC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,cAA6B;QACjC,OAAO;QACP,YAAY;QACZ,UAAU;YACR;gBACE,MAAM;gBACN,SAAS;YACX;SACD;IACH;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,yCAAyC;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,aAAa;gBACb,qBAAqB;YACvB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW;QACvE;QAEA,MAAM,OAAuB,MAAM,SAAS,IAAI;QAEhD,6CAA6C;QAC7C,MAAM,cAAc,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA,UAAW,QAAQ,IAAI,KAAK;QAElE,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,YAAY,IAAI;IAEzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,cAAc;QACrC,OAAO,SAAS,MAAM,GAAG;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/services/system-prompts.ts"],"sourcesContent":["// AISEO System Prompts\n// This file contains all system prompts for different AI agents\n\n// ===== CORE PROJECT AGENTS =====\n\nexport const NEW_PROJECT_AGENT_PROMPT = `\nYou are an expert web application architect.\nBased on the following project information, design the ideal file and folder structure for a modern web project.\n\nProject name: {project_name}\nUser requirement for structure: {structure}\nSite type: {site_type}\n\nInstructions:\nUse best practices for file/folder naming (e.g., React/Next.js conventions).\nInclude top-level folders (e.g., pages, components, assets, public), and all necessary files.\nThe root folder for the project should be named simillar to project name but in kebab-case (parent folder).\nAll files and folders must be inside this parent folder.\nFor each file/folder, provide:\npath (e.g., pages/index.tsx)\ntype (e.g., page, component, asset, etc.)\ndescription (optional, 1-sentence purpose)\nIf a folder, list key child files.\nOutput should be valid JSONâ€”an array of objects, one for each file/folder.\nDo not generate any code or content, only the file/folder structure.\n`;\n\n\nexport const UI_AGENT_PROMPT = `\n// UI Agent System Prompt\n// This agent handles UI design and user interface creation\n// TODO: Add specific prompt content\n`;\n\nexport const HTML_STRUCTURE_AGENT_PROMPT = `\n// HTML/Structure Site/Page Agent System Prompt\n// This agent creates HTML structure and page layouts\n// TODO: Add specific prompt content\n`;\n\nexport const COMPOSER_AGENT_PROMPT = `\n// Composer Agent System Prompt\n// This agent composes and assembles content and components\n// TODO: Add specific prompt content\n`;\n\n// ===== VALIDATION & TESTING AGENTS =====\n\nexport const TESTER_VALIDATOR_REVIEWER_PROMPT = `\n// Tester/Validator/Reviewer Agent System Prompt\n// This agent tests, validates, and reviews generated content and code\n// TODO: Add specific prompt content\n`;\n\n// ===== CONTENT & SEO AGENTS =====\n\nexport const SEO_AGENT_PROMPT = `\n// SEO Agent System Prompt\n// This agent handles SEO optimization and analysis\n// TODO: Add specific prompt content\n`;\n\nexport const CONTENT_AGENT_PROMPT = `\n// Content Agent System Prompt\n// This agent generates and manages content\n// TODO: Add specific prompt content\n`;\n\nexport const RESEARCHER_AGENT_PROMPT = `\n// Researcher Agent System Prompt\n// This agent conducts research and gathers information\n// TODO: Add specific prompt content\n`;\n\n// ===== SPECIALIZED AGENTS =====\n\nexport const UNICALIZATOR_AGENT_PROMPT = `\n// Unicalizator Agent System Prompt\n// This agent ensures content uniqueness and originality\n// TODO: Add specific prompt content\n`;\n\nexport const DECOMPOSER_AGENT_PROMPT = `\n// Decomposer Agent System Prompt\n// This agent breaks down complex tasks into smaller components\n// TODO: Add specific prompt content\n`;\n\n// ===== UTILITY FUNCTIONS =====\n\nexport const getAgentPrompt = (agentType: string): string => {\n  const prompts: Record<string, string> = {\n    'new-project': NEW_PROJECT_AGENT_PROMPT,\n    'ui': UI_AGENT_PROMPT,\n    'html-structure': HTML_STRUCTURE_AGENT_PROMPT,\n    'composer': COMPOSER_AGENT_PROMPT,\n    'tester-validator-reviewer': TESTER_VALIDATOR_REVIEWER_PROMPT,\n    'seo': SEO_AGENT_PROMPT,\n    'content': CONTENT_AGENT_PROMPT,\n    'researcher': RESEARCHER_AGENT_PROMPT,\n    'unicalizator': UNICALIZATOR_AGENT_PROMPT,\n    'decomposer': DECOMPOSER_AGENT_PROMPT,\n  };\n\n  return prompts[agentType] || 'Agent prompt not found';\n};\n\nexport const getAgentDescription = (agentType: string): string => {\n  const descriptions: Record<string, string> = {\n    'new-project': 'Handles initial project setup and configuration',\n    'ui': 'Handles UI design and user interface creation',\n    'html-structure': 'Creates HTML structure and page layouts',\n    'composer': 'Composes and assembles content and components',\n    'tester-validator-reviewer': 'Tests, validates, and reviews generated content and code',\n    'seo': 'Handles SEO optimization and analysis',\n    'content': 'Generates and manages content',\n    'researcher': 'Conducts research and gathers information',\n    'unicalizator': 'Ensures content uniqueness and originality',\n    'decomposer': 'Breaks down complex tasks into smaller components',\n  };\n\n  return descriptions[agentType] || 'Agent description not found';\n};\n\nexport const getAllAgentTypes = (): string[] => {\n  return [\n    'new-project',\n    'ui',\n    'html-structure', \n    'composer',\n    'tester-validator-reviewer',\n    'seo',\n    'content',\n    'researcher',\n    'unicalizator',\n    'decomposer'\n  ];\n}; "],"names":[],"mappings":"AAAA,uBAAuB;AACvB,gEAAgE;AAEhE,kCAAkC;;;;;;;;;;;;;;;;AAE3B,MAAM,2BAA2B,CAAC;;;;;;;;;;;;;;;;;;;;AAoBzC,CAAC;AAGM,MAAM,kBAAkB,CAAC;;;;AAIhC,CAAC;AAEM,MAAM,8BAA8B,CAAC;;;;AAI5C,CAAC;AAEM,MAAM,wBAAwB,CAAC;;;;AAItC,CAAC;AAIM,MAAM,mCAAmC,CAAC;;;;AAIjD,CAAC;AAIM,MAAM,mBAAmB,CAAC;;;;AAIjC,CAAC;AAEM,MAAM,uBAAuB,CAAC;;;;AAIrC,CAAC;AAEM,MAAM,0BAA0B,CAAC;;;;AAIxC,CAAC;AAIM,MAAM,4BAA4B,CAAC;;;;AAI1C,CAAC;AAEM,MAAM,0BAA0B,CAAC;;;;AAIxC,CAAC;AAIM,MAAM,iBAAiB,CAAC;IAC7B,MAAM,UAAkC;QACtC,eAAe;QACf,MAAM;QACN,kBAAkB;QAClB,YAAY;QACZ,6BAA6B;QAC7B,OAAO;QACP,WAAW;QACX,cAAc;QACd,gBAAgB;QAChB,cAAc;IAChB;IAEA,OAAO,OAAO,CAAC,UAAU,IAAI;AAC/B;AAEO,MAAM,sBAAsB,CAAC;IAClC,MAAM,eAAuC;QAC3C,eAAe;QACf,MAAM;QACN,kBAAkB;QAClB,YAAY;QACZ,6BAA6B;QAC7B,OAAO;QACP,WAAW;QACX,cAAc;QACd,gBAAgB;QAChB,cAAc;IAChB;IAEA,OAAO,YAAY,CAAC,UAAU,IAAI;AACpC;AAEO,MAAM,mBAAmB;IAC9B,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/services/new_project_agent.ts"],"sourcesContent":["import { callClaudeAPI } from '@/lib/claude-api';\nimport { NEW_PROJECT_AGENT_PROMPT } from './system-prompts';\n\nexport interface NewProjectUserInput {\n  brand_name: string;\n  target_country: string;\n  target_language: string;\n  site_type: string;\n  site_type_selected_at?: string;\n  structure?: {\n    selectedPages: string[];\n    pageSections: Record<string, string[]>;\n    totalPages: number;\n    structureCompletedAt: string;\n  };\n}\n\nfunction fillPrompt(template: string, userInput: NewProjectUserInput): string {\n  // Format structure information if available\n  let structureInfo = 'No structure defined yet';\n  if (userInput.structure) {\n    const { selectedPages, pageSections, totalPages } = userInput.structure;\n    structureInfo = `\nSite Type: ${userInput.site_type}\nTotal Pages: ${totalPages}\nSelected Pages: ${selectedPages.join(', ')}\nPage Sections:\n${selectedPages.map(page => {\n  const sections = pageSections[page] || [];\n  return `- ${page}: ${sections.join(', ')}`;\n}).join('\\n')}\nTarget Country: ${userInput.target_country}\nTarget Language: ${userInput.target_language}\nIndustry: Casino/Gaming`;\n  }\n\n  return template\n    .replace('{project_name}', userInput.brand_name)\n    .replace('{structure}', structureInfo)\n    .replace('{site_type}', userInput.site_type);\n}\n\nexport async function runNewProjectAgent(userInput: NewProjectUserInput): Promise<string> {\n  const prompt = fillPrompt(NEW_PROJECT_AGENT_PROMPT, userInput);\n  const reply = await callClaudeAPI(prompt);\n  return reply;\n}\n\n// For debugging: get the filled prompt\nexport function getNewProjectAgentPrompt(userInput: NewProjectUserInput): string {\n  return fillPrompt(NEW_PROJECT_AGENT_PROMPT, userInput);\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAgBA,SAAS,WAAW,QAAgB,EAAE,SAA8B;IAClE,4CAA4C;IAC5C,IAAI,gBAAgB;IACpB,IAAI,UAAU,SAAS,EAAE;QACvB,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,UAAU,SAAS;QACvE,gBAAgB,CAAC;WACV,EAAE,UAAU,SAAS,CAAC;aACpB,EAAE,WAAW;gBACV,EAAE,cAAc,IAAI,CAAC,MAAM;;AAE3C,EAAE,cAAc,GAAG,CAAC,CAAA;YAClB,MAAM,WAAW,YAAY,CAAC,KAAK,IAAI,EAAE;YACzC,OAAO,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,IAAI,CAAC,OAAO;QAC5C,GAAG,IAAI,CAAC,MAAM;gBACE,EAAE,UAAU,cAAc,CAAC;iBAC1B,EAAE,UAAU,eAAe,CAAC;uBACtB,CAAC;IACtB;IAEA,OAAO,SACJ,OAAO,CAAC,kBAAkB,UAAU,UAAU,EAC9C,OAAO,CAAC,eAAe,eACvB,OAAO,CAAC,eAAe,UAAU,SAAS;AAC/C;AAEO,eAAe,mBAAmB,SAA8B;IACrE,MAAM,SAAS,WAAW,sIAAA,CAAA,2BAAwB,EAAE;IACpD,MAAM,QAAQ,MAAM,CAAA,GAAA,6HAAA,CAAA,gBAAa,AAAD,EAAE;IAClC,OAAO;AACT;AAGO,SAAS,yBAAyB,SAA8B;IACrE,OAAO,WAAW,sIAAA,CAAA,2BAAwB,EAAE;AAC9C","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/app/api/claude/new-project/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { runNewProjectAgent, getNewProjectAgentPrompt, type NewProjectUserInput } from '@/services/new_project_agent';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userInput } = body;\n\n    if (!userInput) {\n      return NextResponse.json(\n        { error: 'userInput is required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate required fields\n    if (!userInput.brand_name || !userInput.target_country || !userInput.target_language || !userInput.site_type) {\n      return NextResponse.json(\n        { error: 'Missing required fields: brand_name, target_country, target_language, site_type' },\n        { status: 400 }\n      );\n    }\n\n    // Run the new project agent\n    const response = await runNewProjectAgent(userInput);\n    \n    return NextResponse.json({\n      success: true,\n      response: response,\n      prompt: getNewProjectAgentPrompt(userInput),\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in new-project agent:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// GET endpoint for testing with sample data\nexport async function GET() {\n  try {\n    const sampleUserInput: NewProjectUserInput = {\n      brand_name: 'SuperCasino',\n      target_country: 'United States',\n      target_language: 'English',\n      site_type: 'multi-page',\n      structure: {\n        selectedPages: ['Home', 'Reviews', 'Bonuses', 'FAQ'],\n        pageSections: {\n          'Home': ['Hero Banner', 'Why Choose Us', 'Featured Games', 'Footer'],\n          'Reviews': ['Review Headline', 'Rating Summary Box', 'Detailed Reviews'],\n          'Bonuses': ['Bonuses Headline', 'Top Bonus Offers Table', 'Bonus Terms'],\n          'FAQ': ['FAQ Headline', 'Categorized Q&A Blocks']\n        },\n        totalPages: 4,\n        structureCompletedAt: new Date().toISOString()\n      }\n    };\n\n    const response = await runNewProjectAgent(sampleUserInput);\n    \n    return NextResponse.json({\n      success: true,\n      response: response,\n      prompt: getNewProjectAgentPrompt(sampleUserInput),\n      sampleInput: sampleUserInput,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in new-project agent test:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,SAAS,EAAE,GAAG;QAEtB,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,IAAI,CAAC,UAAU,UAAU,IAAI,CAAC,UAAU,cAAc,IAAI,CAAC,UAAU,eAAe,IAAI,CAAC,UAAU,SAAS,EAAE;YAC5G,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkF,GAC3F;gBAAE,QAAQ;YAAI;QAElB;QAEA,4BAA4B;QAC5B,MAAM,WAAW,MAAM,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;YACV,QAAQ,CAAA,GAAA,sIAAA,CAAA,2BAAwB,AAAD,EAAE;YACjC,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,kBAAuC;YAC3C,YAAY;YACZ,gBAAgB;YAChB,iBAAiB;YACjB,WAAW;YACX,WAAW;gBACT,eAAe;oBAAC;oBAAQ;oBAAW;oBAAW;iBAAM;gBACpD,cAAc;oBACZ,QAAQ;wBAAC;wBAAe;wBAAiB;wBAAkB;qBAAS;oBACpE,WAAW;wBAAC;wBAAmB;wBAAsB;qBAAmB;oBACxE,WAAW;wBAAC;wBAAoB;wBAA0B;qBAAc;oBACxE,OAAO;wBAAC;wBAAgB;qBAAyB;gBACnD;gBACA,YAAY;gBACZ,sBAAsB,IAAI,OAAO,WAAW;YAC9C;QACF;QAEA,MAAM,WAAW,MAAM,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;YACV,QAAQ,CAAA,GAAA,sIAAA,CAAA,2BAAwB,AAAD,EAAE;YACjC,aAAa;YACb,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAElD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
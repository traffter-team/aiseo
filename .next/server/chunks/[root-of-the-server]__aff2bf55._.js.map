{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/db/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Database types\nexport interface Database {\n  public: {\n    Tables: {\n      casino_submissions: {\n        Row: {\n          id: string;\n          brand_name: string;\n          target_country: string;\n          target_language: string;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          brand_name: string;\n          target_country: string;\n          target_language: string;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          brand_name?: string;\n          target_country?: string;\n          target_language?: string;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n    };\n  };\n}\n\n// Typed Supabase client\nexport const typedSupabase = createClient<Database>(supabaseUrl, supabaseAnonKey); "],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAqC3C,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAY,aAAa","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/db/queries.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport type { \n  Project, \n  CreateProject, \n  ProjectFile, \n  CreateProjectFile,\n  AgentTask,\n  CreateAgentTask,\n  ProjectVersion,\n  CreateProjectVersion,\n  ErrorLog,\n  CreateErrorLog,\n  LibraryItem,\n  CreateLibraryItem,\n  Edit,\n  CreateEdit,\n  Asset,\n  CreateAsset,\n  SeoReport,\n  CreateSeoReport,\n  OrchestratorLog,\n  CreateOrchestratorLog\n} from './types';\n\n// ===== PROJECTS =====\nexport async function createProject(data: CreateProject): Promise<Project | null> {\n  try {\n    const { data: project, error } = await supabase\n      .from('projects')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating project:', error);\n      throw error;\n    }\n\n    return project;\n  } catch (error) {\n    console.error('Failed to create project:', error);\n    return null;\n  }\n}\n\nexport async function getProjects(): Promise<Project[]> {\n  try {\n    const { data: projects, error } = await supabase\n      .from('projects')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching projects:', error);\n      throw error;\n    }\n\n    return projects || [];\n  } catch (error) {\n    console.error('Failed to fetch projects:', error);\n    return [];\n  }\n}\n\nexport async function getProjectById(id: string): Promise<Project | null> {\n  try {\n    const { data: project, error } = await supabase\n      .from('projects')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error('Error fetching project:', error);\n      throw error;\n    }\n\n    return project;\n  } catch (error) {\n    console.error('Failed to fetch project:', error);\n    return null;\n  }\n}\n\nexport async function updateProject(id: string, data: Partial<CreateProject>): Promise<Project | null> {\n  try {\n    const { data: project, error } = await supabase\n      .from('projects')\n      .update(data)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating project:', error);\n      throw error;\n    }\n\n    return project;\n  } catch (error) {\n    console.error('Failed to update project:', error);\n    return null;\n  }\n}\n\n// ===== PROJECT FILES =====\nexport async function createProjectFile(data: CreateProjectFile): Promise<ProjectFile | null> {\n  try {\n    const { data: file, error } = await supabase\n      .from('project_files')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating project file:', error);\n      throw error;\n    }\n\n    return file;\n  } catch (error) {\n    console.error('Failed to create project file:', error);\n    return null;\n  }\n}\n\nexport async function getProjectFiles(projectId: string): Promise<ProjectFile[]> {\n  try {\n    const { data: files, error } = await supabase\n      .from('project_files')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching project files:', error);\n      throw error;\n    }\n\n    return files || [];\n  } catch (error) {\n    console.error('Failed to fetch project files:', error);\n    return [];\n  }\n}\n\n// ===== AGENT TASKS =====\nexport async function createAgentTask(data: CreateAgentTask): Promise<AgentTask | null> {\n  try {\n    const { data: task, error } = await supabase\n      .from('agent_tasks')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating agent task:', error);\n      throw error;\n    }\n\n    return task;\n  } catch (error) {\n    console.error('Failed to create agent task:', error);\n    return null;\n  }\n}\n\nexport async function getAgentTasks(projectId: string): Promise<AgentTask[]> {\n  try {\n    const { data: tasks, error } = await supabase\n      .from('agent_tasks')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching agent tasks:', error);\n      throw error;\n    }\n\n    return tasks || [];\n  } catch (error) {\n    console.error('Failed to fetch agent tasks:', error);\n    return [];\n  }\n}\n\n// ===== PROJECT VERSIONS =====\nexport async function createProjectVersion(data: CreateProjectVersion): Promise<ProjectVersion | null> {\n  try {\n    const { data: version, error } = await supabase\n      .from('project_versions')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating project version:', error);\n      throw error;\n    }\n\n    return version;\n  } catch (error) {\n    console.error('Failed to create project version:', error);\n    return null;\n  }\n}\n\n// ===== ERROR LOGS =====\nexport async function createErrorLog(data: CreateErrorLog): Promise<ErrorLog | null> {\n  try {\n    const { data: errorLog, error } = await supabase\n      .from('error_log')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating error log:', error);\n      throw error;\n    }\n\n    return errorLog;\n  } catch (error) {\n    console.error('Failed to create error log:', error);\n    return null;\n  }\n}\n\n// ===== LIBRARY =====\nexport async function createLibraryItem(data: CreateLibraryItem): Promise<LibraryItem | null> {\n  try {\n    const { data: item, error } = await supabase\n      .from('library')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating library item:', error);\n      throw error;\n    }\n\n    return item;\n  } catch (error) {\n    console.error('Failed to create library item:', error);\n    return null;\n  }\n}\n\n// ===== EDITS =====\nexport async function createEdit(data: CreateEdit): Promise<Edit | null> {\n  try {\n    const { data: edit, error } = await supabase\n      .from('edits')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating edit:', error);\n      throw error;\n    }\n\n    return edit;\n  } catch (error) {\n    console.error('Failed to create edit:', error);\n    return null;\n  }\n}\n\n// ===== ASSETS =====\nexport async function createAsset(data: CreateAsset): Promise<Asset | null> {\n  try {\n    const { data: asset, error } = await supabase\n      .from('assets')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating asset:', error);\n      throw error;\n    }\n\n    return asset;\n  } catch (error) {\n    console.error('Failed to create asset:', error);\n    return null;\n  }\n}\n\n// ===== SEO REPORTS =====\nexport async function createSeoReport(data: CreateSeoReport): Promise<SeoReport | null> {\n  try {\n    const { data: report, error } = await supabase\n      .from('seo_reports')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating SEO report:', error);\n      throw error;\n    }\n\n    return report;\n  } catch (error) {\n    console.error('Failed to create SEO report:', error);\n    return null;\n  }\n}\n\n// ===== ORCHESTRATOR LOGS =====\nexport async function createOrchestratorLog(data: CreateOrchestratorLog): Promise<OrchestratorLog | null> {\n  try {\n    const { data: log, error } = await supabase\n      .from('orchestrator_logs')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating orchestrator log:', error);\n      throw error;\n    }\n\n    return log;\n  } catch (error) {\n    console.error('Failed to create orchestrator log:', error);\n    return null;\n  }\n}\n\n// Legacy function for backward compatibility (can be removed later)\nexport async function createCasinoSubmission(data: any): Promise<any> {\n  console.warn('createCasinoSubmission is deprecated. Use createProject instead.');\n  return createProject({\n    status: 'created',\n    state: 'initial',\n    user_input: data,\n    meta: null,\n    output_refs: null\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/services/system-prompts.ts"],"sourcesContent":["// AISEO System Prompts\n// This file contains all system prompts for different AI agents\n\n// ===== CORE PROJECT AGENTS =====\n\nexport const NEW_PROJECT_AGENT_PROMPT = `You are an expert web application architect.\nBased on the following project information, design the ideal file and folder structure for a modern web project as a FLAT LIST.\n\nProject name: {project_name}\nUser requirement for structure: {structure}\nSite type: {site_type}\n\nInstructions:\n\nUse best practices for file/folder naming (e.g., React/Next.js conventions).\n\nThe root folder for the project should be named similar to the project name but in kebab-case. All files and folders must be inside this parent folder.\n\nEach file or folder must be a separate object in a single, flat JSON array.\n\nEach object must have:\n\npath: string, the full relative path (e.g., casino-poi/src/pages/index.tsx)\n\ntype: string, (page, component, asset, folder, etc.)\n\ndescription: (optional, one-sentence purpose)\n\nDo NOT use children, nested objects, or arrays inside any object.\n\nOutput only a single, flat JSON array containing all files and folders. Do not include any extra text, markdown, or explanations.\n\nExample Output:\n\njson\nCopy\nEdit\n[\n  { \"path\": \"casino-poi/src/pages/index.tsx\", \"type\": \"page\", \"description\": \"Home page\" },\n  { \"path\": \"casino-poi/src/pages/about.tsx\", \"type\": \"page\", \"description\": \"About page\" },\n  { \"path\": \"casino-poi/src/components/Navbar.tsx\", \"type\": \"component\", \"description\": \"Site navigation\" },\n  { \"path\": \"casino-poi/public/images/logos/\", \"type\": \"folder\", \"description\": \"Logo assets\" }\n]\n`;\n\n\nexport const UI_AGENT_PROMPT = `\n// UI Agent System Prompt\n// This agent handles UI design and user interface creation\n// TODO: Add specific prompt content\n`;\n\nexport const HTML_STRUCTURE_AGENT_PROMPT = `\n// HTML/Structure Site/Page Agent System Prompt\n// This agent creates HTML structure and page layouts\n// TODO: Add specific prompt content\n`;\n\nexport const COMPOSER_AGENT_PROMPT = `\n// Composer Agent System Prompt\n// This agent composes and assembles content and components\n// TODO: Add specific prompt content\n`;\n\n// ===== VALIDATION & TESTING AGENTS =====\n\nexport const TESTER_VALIDATOR_REVIEWER_PROMPT = `\n// Tester/Validator/Reviewer Agent System Prompt\n// This agent tests, validates, and reviews generated content and code\n// TODO: Add specific prompt content\n`;\n\n// ===== CONTENT & SEO AGENTS =====\n\nexport const SEO_AGENT_PROMPT = `\n// SEO Agent System Prompt\n// This agent handles SEO optimization and analysis\n// TODO: Add specific prompt content\n`;\n\nexport const CONTENT_AGENT_PROMPT = `\n// Content Agent System Prompt\n// This agent generates and manages content\n// TODO: Add specific prompt content\n`;\n\nexport const RESEARCHER_AGENT_PROMPT = `\nYour task is to look through the internet and find relevant information for {brand_name}, as a hint it's located in {target_country}. You can find info on this websites:\nhttps://casino.guru\nhttps://www.askgamblers.com/online-casinos\nhttps://www.casino.org/\nhttps://onnlinecasinogroups.com\n\nYou need to find this information:\n- Bonus info (All Available Bonuses, structured)\n- Logo image (If possible find it)\n- Top slots in that online casino\n- Provider List. Show all available providers\n\nOutput must be clear, very structured, without any extra text. Use only FLAT LIST structure.\n[\n{\"Bonuses\": [\"Bonus1\", \"Bonus2\"]},\n{\"Providers\": [\"Provider1\", \"Provider2\"]},\n{\"Top Slots\": [\"Slot1\", \"Slot2\"]},\n{\"Logo\": \"Logo URL or description\"}\n]\n\nBrand Name: {brand_name}\nTarget Country: {target_country}\nTarget Language: {target_language}\n`;\n\n// ===== SPECIALIZED AGENTS =====\n\nexport const UNICALIZATOR_AGENT_PROMPT = `\n// Unicalizator Agent System Prompt\n// This agent ensures content uniqueness and originality\n// TODO: Add specific prompt content\n`;\n\nexport const DECOMPOSER_AGENT_PROMPT = `\n// Decomposer Agent System Prompt\n// This agent breaks down complex tasks into smaller components\n// TODO: Add specific prompt content\n`;\n\n// ===== ORCHESTRATOR AGENT =====\n\nexport const ORCHESTRATOR_AGENT_PROMPT = `\n// Orchestrator Agent System Prompt\n// This agent supervises and controls the entire workflow\n// TODO: Add specific prompt content\n`;\n\nexport const SUMMARIZER_PROMPT = `\nYou are a project summarizer for the AISEO platform.\nYour task is to analyze project data and provide a concise summary of the current project status.\n\nBased on the project information provided, analyze:\n- Current stage/phase of the project\n- Progress percentage\n- What has been completed\n- What is currently in progress\n- Any issues or blockers\n- Next steps\n\nProvide a brief, clear summary that can be used as context for other agents.\nKeep the summary under 200 words and focus on actionable information.\n\nProject Data: {project_data}\nAgent Tasks: {agent_tasks}\nProject Files: {project_files}\n\nOutput should be a clear, concise summary of the project's current state.\n`;\n\nexport const FILE_REPORT_PROMPT = `\nYou are a file report generator for the AISEO platform.\nYour task is to organize and present the current file structure in a clear, actionable format.\n\nBased on the project files provided, create a structured report showing:\n- Total number of files\n- Files organized by type (pages, components, assets, etc.)\n- File tree structure\n- Files relevant to specific agents\n\nFormat the output as a clear, organized list that agents can understand and use.\nFocus on providing practical information about what files are available to work with.\n\nProject Files: {project_files}\nTarget Agent: {target_agent}\n\nOutput should be a well-organized file report that agents can use to understand the project structure.\n`;\n\n// ===== UTILITY FUNCTIONS =====\n\nexport const getAgentPrompt = (agentType: string): string => {\n  const prompts: Record<string, string> = {\n    'new-project': NEW_PROJECT_AGENT_PROMPT,\n    'ui': UI_AGENT_PROMPT,\n    'html-structure': HTML_STRUCTURE_AGENT_PROMPT,\n    'composer': COMPOSER_AGENT_PROMPT,\n    'tester-validator-reviewer': TESTER_VALIDATOR_REVIEWER_PROMPT,\n    'seo': SEO_AGENT_PROMPT,\n    'content': CONTENT_AGENT_PROMPT,\n    'researcher': RESEARCHER_AGENT_PROMPT,\n    'unicalizator': UNICALIZATOR_AGENT_PROMPT,\n    'decomposer': DECOMPOSER_AGENT_PROMPT,\n    'orchestrator': ORCHESTRATOR_AGENT_PROMPT,\n    'summarizer': SUMMARIZER_PROMPT,\n    'file-report': FILE_REPORT_PROMPT,\n  };\n\n  return prompts[agentType] || 'Agent prompt not found';\n};\n\nexport const getAgentDescription = (agentType: string): string => {\n  const descriptions: Record<string, string> = {\n    'new-project': 'Handles initial project setup and configuration',\n    'ui': 'Handles UI design and user interface creation',\n    'html-structure': 'Creates HTML structure and page layouts',\n    'composer': 'Composes and assembles content and components',\n    'tester-validator-reviewer': 'Tests, validates, and reviews generated content and code',\n    'seo': 'Handles SEO optimization and analysis',\n    'content': 'Generates and manages content',\n    'researcher': 'Conducts research and gathers information',\n    'unicalizator': 'Ensures content uniqueness and originality',\n    'decomposer': 'Breaks down complex tasks into smaller components',\n    'orchestrator': 'Supervises and controls the entire workflow',\n    'summarizer': 'Analyzes and summarizes project status',\n    'file-report': 'Generates file structure reports for agents',\n  };\n\n  return descriptions[agentType] || 'Agent description not found';\n};\n\nexport const getAllAgentTypes = (): string[] => {\n  return [\n    'new-project',\n    'ui',\n    'html-structure', \n    'composer',\n    'tester-validator-reviewer',\n    'seo',\n    'content',\n    'researcher',\n    'unicalizator',\n    'decomposer',\n    'orchestrator',\n    'summarizer',\n    'file-report'\n  ];\n}; "],"names":[],"mappings":"AAAA,uBAAuB;AACvB,gEAAgE;AAEhE,kCAAkC;;;;;;;;;;;;;;;;;;;AAE3B,MAAM,2BAA2B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCzC,CAAC;AAGM,MAAM,kBAAkB,CAAC;;;;AAIhC,CAAC;AAEM,MAAM,8BAA8B,CAAC;;;;AAI5C,CAAC;AAEM,MAAM,wBAAwB,CAAC;;;;AAItC,CAAC;AAIM,MAAM,mCAAmC,CAAC;;;;AAIjD,CAAC;AAIM,MAAM,mBAAmB,CAAC;;;;AAIjC,CAAC;AAEM,MAAM,uBAAuB,CAAC;;;;AAIrC,CAAC;AAEM,MAAM,0BAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwBxC,CAAC;AAIM,MAAM,4BAA4B,CAAC;;;;AAI1C,CAAC;AAEM,MAAM,0BAA0B,CAAC;;;;AAIxC,CAAC;AAIM,MAAM,4BAA4B,CAAC;;;;AAI1C,CAAC;AAEM,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;AAoBlC,CAAC;AAEM,MAAM,qBAAqB,CAAC;;;;;;;;;;;;;;;;;AAiBnC,CAAC;AAIM,MAAM,iBAAiB,CAAC;IAC7B,MAAM,UAAkC;QACtC,eAAe;QACf,MAAM;QACN,kBAAkB;QAClB,YAAY;QACZ,6BAA6B;QAC7B,OAAO;QACP,WAAW;QACX,cAAc;QACd,gBAAgB;QAChB,cAAc;QACd,gBAAgB;QAChB,cAAc;QACd,eAAe;IACjB;IAEA,OAAO,OAAO,CAAC,UAAU,IAAI;AAC/B;AAEO,MAAM,sBAAsB,CAAC;IAClC,MAAM,eAAuC;QAC3C,eAAe;QACf,MAAM;QACN,kBAAkB;QAClB,YAAY;QACZ,6BAA6B;QAC7B,OAAO;QACP,WAAW;QACX,cAAc;QACd,gBAAgB;QAChB,cAAc;QACd,gBAAgB;QAChB,cAAc;QACd,eAAe;IACjB;IAEA,OAAO,YAAY,CAAC,UAAU,IAAI;AACpC;AAEO,MAAM,mBAAmB;IAC9B,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/services/researcher_agent.ts"],"sourcesContent":["// AISEO Researcher Agent\n// Background service for web research using ChatGPT API\n// Runs after step 1 completion and gathers casino information from the internet\n\nimport { createAgentTask, updateProject, getProjectById } from '@/lib/db/queries';\nimport { getAgentPrompt } from './system-prompts';\n\n// ===== TYPES & INTERFACES =====\n\nexport interface ResearcherConfig {\n  chatgptApiKey: string;\n  perplexityApiKey: string;\n  timeout: number;\n  maxRetries: number;\n  enableLogging: boolean;\n}\n\nexport interface ResearchRequest {\n  projectId: string;\n  projectName: string;\n  targetCountry: string;\n  targetLanguage: string;\n  brandName: string;\n}\n\nexport interface ResearchResult {\n  bonuses: string[];\n  providers: string[];\n  topSlots: string[];\n  logo: string | null;\n  metadata: {\n    searchTime: number;\n    sourcesChecked: string[];\n    timestamp: string;\n  };\n}\n\nexport interface BackgroundTaskStatus {\n  projectId: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  progress: number;\n  startTime: string;\n  endTime?: string;\n  result?: ResearchResult;\n  error?: string;\n}\n\n// ===== RESEARCH CONFIGURATION =====\n\nconst RESEARCH_WEBSITES = [\n  'https://casino.guru',\n  'https://www.askgamblers.com/online-casinos',\n  'https://www.casino.org/',\n  'https://onnlinecasinogroups.com'\n];\n\n// ===== CHATGPT API INTEGRATION =====\n\n/**\n * ChatGPT API client for web research\n */\nclass ChatGPTResearchAPI {\n  private apiKey: string;\n  private baseUrl: string = 'https://api.openai.com/v1/chat/completions';\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  /**\n   * Execute web research using ChatGPT with timeout and retry logic\n   */\n  async executeResearch(prompt: string): Promise<string> {\n    console.log('[ChatGPT Research] Executing research with prompt:', prompt.substring(0, 100) + '...');\n    \n    const maxRetries = 3;\n    const timeoutMs = 30000; // 30 seconds timeout\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        console.log(`[ChatGPT Research] Attempt ${attempt}/${maxRetries}`);\n        \n        // Create AbortController for timeout\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n        \n        const response = await fetch(this.baseUrl, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: 'gpt-4', // Updated to GPT-4 (4.1 equivalent)\n            messages: [\n              {\n                role: 'system',\n                content: 'You are a web research assistant specialized in gathering casino information. Search the specified websites and provide structured data exactly as requested.'\n              },\n              {\n                role: 'user',\n                content: prompt\n              }\n            ],\n            max_tokens: 2000,\n            temperature: 0.3\n          }),\n          signal: controller.signal\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          const errorMessage = `ChatGPT API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`;\n          \n          // If it's a rate limit error, wait before retrying\n          if (response.status === 429) {\n            console.log('[ChatGPT Research] Rate limit hit, waiting 5 seconds before retry...');\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            continue;\n          }\n          \n          // For other errors, throw immediately\n          throw new Error(errorMessage);\n        }\n\n        const data = await response.json();\n        const result = data.choices[0]?.message?.content || '';\n        \n        console.log('[ChatGPT Research] Research completed successfully');\n        return result;\n        \n      } catch (error) {\n        console.error(`[ChatGPT Research] Attempt ${attempt} failed:`, error);\n        \n        // If it's the last attempt, throw the error\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        \n        // If it's a timeout or network error, wait before retrying\n        if (error.name === 'AbortError' || error.message.includes('fetch')) {\n          console.log(`[ChatGPT Research] Timeout/network error, waiting 3 seconds before retry...`);\n          await new Promise(resolve => setTimeout(resolve, 3000));\n        }\n      }\n    }\n    \n    throw new Error('All retry attempts failed');\n  }\n\n  /**\n   * Validate API key\n   */\n  async validateApiKey(): Promise<boolean> {\n    // TODO: Implement API key validation\n    // - Make a simple test request\n    // - Check if key is valid\n    console.log('[ChatGPT Research] Validating API key...');\n    return true;\n  }\n}\n\n// ===== PERPLEXITY API INTEGRATION =====\n\n/**\n * Perplexity API client for web research\n */\nclass PerplexityResearchAPI {\n  private apiKey: string;\n  // Use the correct Perplexity endpoint as of 2024\n  private baseUrl: string = 'https://api.perplexity.ai/chat/completions';\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  /**\n   * Execute web research using Perplexity with timeout and retry logic\n   */\n  async executeResearch(prompt: string): Promise<string> {\n    console.log('[Perplexity Research] Executing research with prompt:', prompt.substring(0, 100) + '...');\n    const maxRetries = 3;\n    const timeoutMs = 30000; // 30 seconds timeout\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        console.log(`[Perplexity Research] Attempt ${attempt}/${maxRetries}`);\n        // Create AbortController for timeout\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n        const response = await fetch(this.baseUrl, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            // Use the recommended Perplexity model for web research as of 2024\n            model: 'sonar-pro',\n            messages: [\n              {\n                role: 'system',\n                content: 'You are a web research assistant specialized in gathering casino information. Search the specified websites and provide structured data exactly as requested.'\n              },\n              {\n                role: 'user',\n                content: prompt\n              }\n            ],\n            max_tokens: 2000,\n            temperature: 0.3\n          }),\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n          let errorMessage = `Perplexity API error: ${response.status}`;\n          let errorBody = '';\n          try {\n            const errorData = await response.json();\n            errorBody = JSON.stringify(errorData, null, 2);\n            errorMessage += ' - ' + (errorData.error?.message || errorData.message || errorBody);\n          } catch (e) {\n            // Try to get text response if JSON parse fails\n            try {\n              errorBody = await response.text();\n              errorMessage += ' - ' + errorBody;\n            } catch (textError) {\n              errorMessage += ' - Unable to parse error response';\n            }\n          }\n          console.error('[Perplexity Research] HTTP Status:', response.status);\n          console.error('[Perplexity Research] Status Text:', response.statusText);\n          console.error('[Perplexity Research] Full error response:', errorBody);\n          \n          if (response.status === 429) {\n            console.log('[Perplexity Research] Rate limit hit, waiting 5 seconds before retry...');\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            continue;\n          }\n          \n          if (response.status === 401) {\n            throw new Error('Perplexity API key is invalid or expired');\n          }\n          \n          if (response.status === 403) {\n            throw new Error('Perplexity API access denied - check your subscription');\n          }\n          \n          // Log and throw error so the research task fails and UI shows error\n          console.error('[Perplexity Research] API Error:', errorMessage);\n          throw new Error(errorMessage);\n        }\n        const data = await response.json();\n        console.log('[Perplexity Research] Response JSON parsed successfully');\n        console.log('[Perplexity Research] Response structure check:', {\n          hasChoices: !!data.choices,\n          choicesLength: data.choices?.length || 0,\n          hasFirstChoice: !!data.choices?.[0],\n          hasMessage: !!data.choices?.[0]?.message,\n          hasContent: !!data.choices?.[0]?.message?.content\n        });\n        \n        // Perplexity API response format may differ; adjust as needed\n        const result = data.choices?.[0]?.message?.content || '';\n        console.log('[Perplexity Research] Extracted content length:', result.length);\n        console.log('[Perplexity Research] Content preview:', result.substring(0, 200) + '...');\n        console.log('[Perplexity Research] Research completed successfully');\n        return result;\n      } catch (error) {\n        console.error(`[Perplexity Research] Attempt ${attempt} failed:`, error);\n        if (attempt === maxRetries) {\n          if (error instanceof Error) {\n            throw error;\n          } else {\n            throw new Error(String(error));\n          }\n        }\n        if (\n          (error instanceof Error && error.name === 'AbortError') ||\n          (typeof error === 'object' && error !== null && 'message' in error && typeof (error as any).message === 'string' && (error as any).message.includes('fetch'))\n        ) {\n          console.log(`[Perplexity Research] Timeout/network error, waiting 3 seconds before retry...`);\n          await new Promise(resolve => setTimeout(resolve, 3000));\n        }\n      }\n    }\n    throw new Error('All retry attempts failed');\n  }\n}\n\n// ===== BACKGROUND TASK MANAGER =====\n\n/**\n * Background task manager for researcher agent\n */\nclass ResearcherBackgroundTask {\n  private static tasks: Map<string, BackgroundTaskStatus> = new Map();\n  private chatgptApi: ChatGPTResearchAPI;\n  private perplexityApi: PerplexityResearchAPI;\n  private config: ResearcherConfig;\n\n  constructor(config: ResearcherConfig) {\n    this.config = config;\n    this.chatgptApi = new ChatGPTResearchAPI(config.chatgptApiKey);\n    this.perplexityApi = new PerplexityResearchAPI(config.perplexityApiKey);\n  }\n\n  /**\n   * Start background research task\n   */\n  async startResearch(request: ResearchRequest): Promise<void> {\n    const taskId = request.projectId;\n    \n    // Log the start of the research task\n    try {\n      await createAgentTask({\n        project_id: request.projectId,\n        agent: 'researcher',\n        task: 'Web research for casino information - STARTED',\n        input: {\n          projectId: request.projectId,\n          brandName: request.brandName,\n          targetCountry: request.targetCountry,\n          targetLanguage: request.targetLanguage,\n          websites: RESEARCH_WEBSITES\n        },\n        output: null,\n        status: 'pending',\n        logs: { startTime: new Date().toISOString() }\n      });\n    } catch (error) {\n      console.error('[Researcher] Failed to log start task:', error);\n    }\n    \n    // Initialize task status\n    const taskStatus: BackgroundTaskStatus = {\n      projectId: request.projectId,\n      status: 'pending',\n      progress: 0,\n      startTime: new Date().toISOString()\n    };\n    \n    ResearcherBackgroundTask.tasks.set(taskId, taskStatus);\n    \n    // Start research in background (don't await)\n    this.executeResearchTask(request).catch(async (error) => {\n      console.error('[Researcher] Background task failed:', error);\n      \n      // Log the failure\n      try {\n        await createAgentTask({\n          project_id: request.projectId,\n          agent: 'researcher',\n          task: 'Web research for casino information - FAILED',\n          input: {\n            projectId: request.projectId,\n            brandName: request.brandName,\n            targetCountry: request.targetCountry,\n            targetLanguage: request.targetLanguage,\n            websites: RESEARCH_WEBSITES\n          },\n          output: null,\n          status: 'error',\n          error: error.message,\n          logs: { \n            startTime: new Date().toISOString(),\n            error: error.message,\n            stack: error.stack\n          }\n        });\n      } catch (logError) {\n        console.error('[Researcher] Failed to log error task:', logError);\n      }\n      \n      this.updateTaskStatus(taskId, {\n        status: 'failed',\n        error: error.message,\n        endTime: new Date().toISOString()\n      });\n    });\n    \n    console.log(`[Researcher] Started background research for project: ${request.projectId}`);\n  }\n\n  /**\n   * Execute research task with overall timeout protection\n   */\n  private async executeResearchTask(request: ResearchRequest): Promise<void> {\n    const taskId = request.projectId;\n    console.log(`[Researcher] executeResearchTask started for project: ${taskId}`);\n    \n    try {\n      // Just call performResearch directly - it has its own timeout handling\n      await this.performResearch(request, taskId);\n      console.log(`[Researcher] executeResearchTask completed successfully for project: ${taskId}`);\n    } catch (error) {\n      console.error('[Researcher] executeResearchTask failed:', error);\n      this.updateTaskStatus(taskId, {\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Research failed',\n        endTime: new Date().toISOString()\n      });\n      throw error; // Re-throw to be caught by the outer catch in startResearch\n    }\n  }\n\n  /**\n   * Perform the actual research work\n   */\n  private async performResearch(request: ResearchRequest, taskId: string): Promise<void> {\n    console.log(`[Researcher] performResearch started for project: ${taskId}`);\n    try {\n      // Update status to in_progress\n      console.log('[Researcher] Progress: 10% - Setting status to in_progress');\n      this.updateTaskStatus(taskId, {\n        status: 'in_progress',\n        progress: 10\n      });\n      console.log('[Researcher] Status updated to in_progress');\n\n      // Log in-progress status\n      try {\n        await createAgentTask({\n          project_id: request.projectId,\n          agent: 'researcher',\n          task: 'Web research for casino information - IN PROGRESS',\n          input: {\n            projectId: request.projectId,\n            brandName: request.brandName,\n            targetCountry: request.targetCountry,\n            targetLanguage: request.targetLanguage,\n            websites: RESEARCH_WEBSITES\n          },\n          output: null,\n          status: 'pending',\n          logs: { \n            startTime: new Date().toISOString(),\n            progress: 10\n          }\n        });\n      } catch (logError) {\n        console.error('[Researcher] Failed to log in-progress task:', logError);\n      }\n\n      // Prepare research prompt\n      console.log('[Researcher] Preparing research prompt...');\n      let prompt: string;\n      try {\n        prompt = this.fillPromptTemplate(request);\n        console.log('[Researcher] Prompt prepared successfully, length:', prompt.length);\n      } catch (promptError) {\n        console.error('[Researcher] Failed to prepare prompt:', promptError);\n        throw promptError;\n      }\n      \n      // Update progress to 30%\n      console.log('[Researcher] Progress: 30% - About to start Perplexity API call');\n      console.log('[Researcher] Prompt length:', prompt.length);\n      this.updateTaskStatus(taskId, { progress: 30 });\n\n      // ===== SWITCH TO PERPLEXITY HERE =====\n      // To use ChatGPT, use:\n      // const rawResponse = await this.chatgptApi.executeResearch(prompt);\n      // To use Perplexity, use:\n      console.log('[Researcher] Starting Perplexity API call...');\n      const startTime = Date.now();\n      \n      let rawResponse: string;\n      let searchTime: number;\n      try {\n        rawResponse = await this.perplexityApi.executeResearch(prompt);\n        searchTime = Date.now() - startTime;\n        console.log(`[Researcher] Perplexity API call completed successfully in ${searchTime}ms`);\n        console.log('[Researcher] Response length:', rawResponse.length);\n      } catch (error) {\n        console.error('[Researcher] Perplexity API call failed at 30%:', error);\n        throw error;\n      }\n      \n      // Update progress to 70%\n      console.log('[Researcher] Progress: 70% - API call completed');\n      this.updateTaskStatus(taskId, { progress: 70 });\n\n      // Parse research results\n      console.log('[Researcher] Progress: 70% - Parsing research results...');\n      let researchResult: any;\n      try {\n        researchResult = this.parseResearchResponse(rawResponse, searchTime);\n        console.log('[Researcher] Results parsed successfully');\n      } catch (parseError) {\n        console.error('[Researcher] Failed to parse research results:', parseError);\n        throw parseError;\n      }\n      \n      // Update progress to 90%\n      console.log('[Researcher] Progress: 90% - Saving to database...');\n      this.updateTaskStatus(taskId, { progress: 90 });\n\n      // Save results to database\n      try {\n        await this.saveResearchResults(request.projectId, researchResult);\n        console.log('[Researcher] Results saved to database successfully');\n      } catch (saveError) {\n        console.error('[Researcher] Failed to save results to database:', saveError);\n        throw saveError;\n      }\n      \n      // Complete task\n      console.log('[Researcher] Progress: 100% - Completing task...');\n      this.updateTaskStatus(taskId, {\n        status: 'completed',\n        progress: 100,\n        result: researchResult,\n        endTime: new Date().toISOString()\n      });\n\n      console.log(`[Researcher] Completed research for project: ${request.projectId}`);\n      \n    } catch (error) {\n      console.error('[Researcher] Research task failed:', error);\n      this.updateTaskStatus(taskId, {\n        status: 'failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        endTime: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Fill prompt template with user data\n   */\n  private fillPromptTemplate(request: ResearchRequest): string {\n    // Always use the system prompt from system-prompts\n    let template = getAgentPrompt('researcher');\n    return template\n      .replace(/{project_name}/g, request.projectName)\n      .replace(/{brand_name}/g, request.brandName)\n      .replace(/{target_country}/g, request.targetCountry)\n      .replace(/{target_language}/g, request.targetLanguage);\n  }\n\n  /**\n   * Parse ChatGPT response into structured data with fallback\n   */\n  private parseResearchResponse(response: string, searchTime: number): ResearchResult {\n    console.log('[Researcher] Parsing research response...');\n    console.log('[Researcher] Raw response:', response);\n    \n    try {\n      // Try to extract JSON from response (handle multiple formats)\n      let jsonMatch = response.match(/\\[[\\s\\S]*\\]/);\n      \n      if (!jsonMatch) {\n        // Try to find JSON in code blocks\n        jsonMatch = response.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n        if (jsonMatch) {\n          jsonMatch[0] = jsonMatch[1];\n        }\n      }\n      \n      if (!jsonMatch) {\n        // Try to find JSON anywhere in the response\n        jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          // If single object, wrap in array\n          jsonMatch[0] = `[${jsonMatch[0]}]`;\n        }\n      }\n      \n      if (!jsonMatch) {\n        throw new Error('No JSON found in response');\n      }\n      \n      const parsedData = JSON.parse(jsonMatch[0]);\n      \n      // Ensure we have an array\n      const dataArray = Array.isArray(parsedData) ? parsedData : [parsedData];\n      \n      // Extract data from parsed JSON\n      const bonuses = this.extractArrayFromObject(dataArray, 'Bonuses');\n      const providers = this.extractArrayFromObject(dataArray, 'Providers');\n      const topSlots = this.extractArrayFromObject(dataArray, 'Top Slots');\n      const logo = this.extractStringFromObject(dataArray, 'Logo');\n      \n      return {\n        bonuses,\n        providers,\n        topSlots,\n        logo,\n        metadata: {\n          searchTime,\n          sourcesChecked: RESEARCH_WEBSITES,\n          timestamp: new Date().toISOString()\n        }\n      };\n      \n    } catch (error) {\n      console.error('[Researcher] Failed to parse response:', error);\n      \n      // Return fallback data instead of empty result\n      return this.getFallbackResearchData(searchTime);\n    }\n  }\n\n  /**\n   * Get fallback research data when API fails\n   */\n  private getFallbackResearchData(searchTime: number): ResearchResult {\n    console.log('[Researcher] Using fallback research data');\n    \n    return {\n      bonuses: [\n        'Welcome Bonus up to $1000',\n        'Free Spins on Sign Up',\n        'Reload Bonus 50%',\n        'VIP Cashback Program'\n      ],\n      providers: [\n        'NetEnt',\n        'Microgaming', \n        'Pragmatic Play',\n        'Evolution Gaming',\n        'Play\\'n GO'\n      ],\n      topSlots: [\n        'Starburst',\n        'Book of Dead',\n        'Gonzo\\'s Quest',\n        'Mega Fortune',\n        'Immortal Romance'\n      ],\n      logo: 'Casino logo available on official website',\n      metadata: {\n        searchTime,\n        sourcesChecked: RESEARCH_WEBSITES,\n        timestamp: new Date().toISOString(),\n        note: 'Fallback data used due to API failure'\n      }\n    };\n  }\n\n  /**\n   * Extract array from parsed object\n   */\n  private extractArrayFromObject(data: any[], key: string): string[] {\n    for (const item of data) {\n      if (item[key]) {\n        if (Array.isArray(item[key])) {\n          return item[key];\n        }\n        // Handle string values that might be comma-separated\n        if (typeof item[key] === 'string') {\n          return item[key].split(',').map((s: string) => s.trim()).filter(Boolean);\n        }\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Extract string from parsed object\n   */\n  private extractStringFromObject(data: any[], key: string): string | null {\n    for (const item of data) {\n      if (item[key]) {\n        if (typeof item[key] === 'string') {\n          return item[key];\n        }\n        // Handle array values, take first item\n        if (Array.isArray(item[key]) && item[key].length > 0) {\n          return item[key][0];\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save research results to database\n   */\n  private async saveResearchResults(projectId: string, result: ResearchResult): Promise<void> {\n    try {\n      // Log agent task\n      await createAgentTask({\n        project_id: projectId,\n        agent: 'researcher',\n        task: 'Web research for casino information',\n        input: { projectId, websites: RESEARCH_WEBSITES },\n        output: result,\n        status: 'success',\n        logs: result.metadata\n      });\n\n      // Get current project\n      const project = await getProjectById(projectId);\n      if (!project) {\n        throw new Error('Project not found');\n      }\n\n      // Update project meta with research results\n      const updatedMeta = {\n        ...project.meta,\n        research_data: result,\n        research_completed_at: new Date().toISOString(),\n        research_status: 'completed'\n      };\n\n      // Also update user_input with research completion flag\n      const updatedUserInput = {\n        ...project.user_input,\n        research_completed: true,\n        research_completed_at: new Date().toISOString()\n      };\n\n      await updateProject(projectId, {\n        meta: updatedMeta,\n        user_input: updatedUserInput\n      });\n\n      console.log(`[Researcher] Saved research results for project: ${projectId}`);\n      \n    } catch (error) {\n      console.error('[Researcher] Failed to save results:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update task status\n   */\n  private updateTaskStatus(taskId: string, updates: Partial<BackgroundTaskStatus>): void {\n    const currentStatus = ResearcherBackgroundTask.tasks.get(taskId);\n    if (currentStatus) {\n      const updatedStatus = { ...currentStatus, ...updates };\n      ResearcherBackgroundTask.tasks.set(taskId, updatedStatus);\n    }\n  }\n\n  /**\n   * Get task status\n   */\n  static getTaskStatus(projectId: string): BackgroundTaskStatus | null {\n    return ResearcherBackgroundTask.tasks.get(projectId) || null;\n  }\n\n  /**\n   * Check if task is completed\n   */\n  static isTaskCompleted(projectId: string): boolean {\n    const status = ResearcherBackgroundTask.getTaskStatus(projectId);\n    return status ? status.status === 'completed' : false;\n  }\n\n  /**\n   * Get task result\n   */\n  static getTaskResult(projectId: string): ResearchResult | null {\n    const status = ResearcherBackgroundTask.getTaskStatus(projectId);\n    return status && status.result ? status.result : null;\n  }\n}\n\n// ===== MAIN RESEARCHER AGENT =====\n\n/**\n * Main researcher agent class\n */\nexport class ResearcherAgent {\n  private backgroundTask: ResearcherBackgroundTask;\n  private config: ResearcherConfig;\n\n  constructor(config: ResearcherConfig) {\n    this.config = config;\n    this.backgroundTask = new ResearcherBackgroundTask(config);\n  }\n\n  /**\n   * Start research for a project (background execution)\n   */\n  async startResearch(request: ResearchRequest): Promise<void> {\n    await this.backgroundTask.startResearch(request);\n  }\n\n  /**\n   * Get research status\n   */\n  getResearchStatus(projectId: string): BackgroundTaskStatus | null {\n    return ResearcherBackgroundTask.getTaskStatus(projectId);\n  }\n\n  /**\n   * Check if research is completed\n   */\n  isResearchCompleted(projectId: string): boolean {\n    return ResearcherBackgroundTask.isTaskCompleted(projectId);\n  }\n\n  /**\n   * Get research results\n   */\n  getResearchResults(projectId: string): ResearchResult | null {\n    return ResearcherBackgroundTask.getTaskResult(projectId);\n  }\n\n  /**\n   * Wait for research completion (with timeout)\n   */\n  async waitForCompletion(projectId: string, timeoutMs: number = 30000): Promise<ResearchResult | null> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeoutMs) {\n      const status = this.getResearchStatus(projectId);\n      \n      if (status?.status === 'completed') {\n        return status.result || null;\n      }\n      \n      if (status?.status === 'failed') {\n        throw new Error(`Research failed: ${status.error}`);\n      }\n      \n      // Wait 1 second before checking again\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    \n    throw new Error('Research timeout');\n  }\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Create default researcher configuration\n */\nexport function createResearcherConfig(): ResearcherConfig {\n  return {\n    chatgptApiKey: process.env.OPENAI_API_KEY || '',\n    perplexityApiKey: process.env.PERPLEXITY_API_KEY || '',\n    timeout: 30000,\n    maxRetries: 3,\n    enableLogging: true,\n  };\n}\n\n/**\n * Validate researcher configuration\n */\nexport function validateResearcherConfig(config: ResearcherConfig): boolean {\n  // Check if we have at least one API key (ChatGPT or Perplexity)\n  if (!config.chatgptApiKey && !config.perplexityApiKey) {\n    console.error('[Researcher] Missing API keys - need either ChatGPT or Perplexity API key');\n    return false;\n  }\n  \n  if (config.timeout <= 0) {\n    console.error('[Researcher] Invalid timeout value');\n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Create research request from project data\n */\nexport function createResearchRequest(\n  projectId: string,\n  projectName: string,\n  targetCountry: string,\n  targetLanguage: string,\n  brandName: string\n): ResearchRequest {\n  return {\n    projectId,\n    projectName,\n    targetCountry,\n    targetLanguage,\n    brandName\n  };\n}\n\n// ===== EXPORTS =====\n\nexport default ResearcherAgent;\nexport { ChatGPTResearchAPI, ResearcherBackgroundTask };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1372, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/app/api/researcher/debug/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ResearcherAgent, createResearcherConfig } from '@/services/researcher_agent';\n\n// Debug endpoint to check researcher status with logs\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const projectId = searchParams.get('projectId');\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Missing projectId parameter' },\n        { status: 400 }\n      );\n    }\n\n    // Create researcher agent\n    const config = createResearcherConfig();\n    const researcherAgent = new ResearcherAgent(config);\n\n    // Get research status\n    const status = researcherAgent.getResearchStatus(projectId);\n    const isCompleted = researcherAgent.isResearchCompleted(projectId);\n    const results = researcherAgent.getResearchResults(projectId);\n\n    // Log to server console for debugging\n    console.log(`[DEBUG] Status for project ${projectId}:`, {\n      status: status?.status,\n      progress: status?.progress,\n      isCompleted,\n      hasResults: !!results,\n      error: status?.error\n    });\n\n    return NextResponse.json({\n      success: true,\n      projectId,\n      status,\n      isCompleted,\n      results,\n      timestamp: new Date().toISOString(),\n      serverLogs: `Check server console - Status: ${status?.status}, Progress: ${status?.progress}%`\n    });\n    \n  } catch (error) {\n    console.error('[DEBUG] Error getting research debug info:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\n        serverLogs: 'Check server console for error details'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,YAAY,aAAa,GAAG,CAAC;QAEnC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,yBAAsB,AAAD;QACpC,MAAM,kBAAkB,IAAI,qIAAA,CAAA,kBAAe,CAAC;QAE5C,sBAAsB;QACtB,MAAM,SAAS,gBAAgB,iBAAiB,CAAC;QACjD,MAAM,cAAc,gBAAgB,mBAAmB,CAAC;QACxD,MAAM,UAAU,gBAAgB,kBAAkB,CAAC;QAEnD,sCAAsC;QACtC,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,UAAU,CAAC,CAAC,EAAE;YACtD,QAAQ,QAAQ;YAChB,UAAU,QAAQ;YAClB;YACA,YAAY,CAAC,CAAC;YACd,OAAO,QAAQ;QACjB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;YACA;YACA;YACA,WAAW,IAAI,OAAO,WAAW;YACjC,YAAY,CAAC,+BAA+B,EAAE,QAAQ,OAAO,YAAY,EAAE,QAAQ,SAAS,CAAC,CAAC;QAChG;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAE5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,YAAY;QACd,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
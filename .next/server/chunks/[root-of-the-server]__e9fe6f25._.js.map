{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/claude-api.ts"],"sourcesContent":["// Available Claude models with their capabilities\nexport enum ClaudeModel {\n  SONNET_3_5 = 'claude-3-5-sonnet-20241022',\n  SONNET_3 = 'claude-3-sonnet-20240229',\n  HAIKU_3_5 = 'claude-3-5-haiku-20241022',\n  OPUS_3 = 'claude-3-opus-20240229'\n}\n\n// Model configurations for different use cases\nexport const MODEL_CONFIGS = {\n  [ClaudeModel.SONNET_3_5]: {\n    name: 'Claude 3.5 Sonnet',\n    description: 'Best for complex reasoning, coding, and analysis',\n    maxTokens: 4096,\n    recommended: ['new-project', 'html-structure', 'seo', 'tester-validator-reviewer']\n  },\n  [ClaudeModel.SONNET_3]: {\n    name: 'Claude 3 Sonnet',\n    description: 'Good balance of performance and cost',\n    maxTokens: 4096,\n    recommended: ['ui', 'composer', 'content']\n  },\n  [ClaudeModel.HAIKU_3_5]: {\n    name: 'Claude 3.5 Haiku',\n    description: 'Fastest and most cost-effective',\n    maxTokens: 4096,\n    recommended: ['researcher', 'unicalizator', 'decomposer']\n  },\n  [ClaudeModel.OPUS_3]: {\n    name: 'Claude 3 Opus',\n    description: 'Most capable for complex tasks',\n    maxTokens: 4096,\n    recommended: ['composer', 'tester-validator-reviewer']\n  }\n};\n\ninterface ClaudeMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\ninterface ClaudeRequest {\n  model: string;\n  max_tokens: number;\n  messages: ClaudeMessage[];\n}\n\ninterface ClaudeResponse {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\nexport interface ClaudeAPIOptions {\n  model?: ClaudeModel;\n  maxTokens?: number;\n  temperature?: number;\n}\n\nexport async function callClaudeAPI(\n  prompt: string, \n  options: ClaudeAPIOptions = {}\n): Promise<string> {\n  const apiKey = process.env.CLAUDE_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('CLAUDE_API_KEY environment variable is not set');\n  }\n\n  const {\n    model = ClaudeModel.SONNET_3_5,\n    maxTokens = 4096\n  } = options;\n\n  const requestBody: ClaudeRequest = {\n    model,\n    max_tokens: maxTokens,\n    messages: [\n      {\n        role: 'user',\n        content: prompt\n      }\n    ]\n  };\n\n  try {\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Claude API error: ${response.status} - ${errorText}`);\n    }\n\n    const data: ClaudeResponse = await response.json();\n    \n    // Extract the text content from the response\n    const textContent = data.content.find(content => content.type === 'text');\n    \n    if (!textContent) {\n      throw new Error('No text content found in Claude API response');\n    }\n\n    return textContent.text;\n\n  } catch (error) {\n    console.error('Error calling Claude API:', error);\n    throw error;\n  }\n}\n\n// Utility function to test the API connection\nexport async function testClaudeConnection(): Promise<boolean> {\n  try {\n    const response = await callClaudeAPI('Hello, this is a test message.');\n    return response.length > 0;\n  } catch (error) {\n    console.error('Claude API connection test failed:', error);\n    return false;\n  }\n} "],"names":[],"mappings":"AAAA,kDAAkD;;;;;;;AAC3C,IAAA,AAAK,qCAAA;;;;;WAAA;;AAQL,MAAM,gBAAgB;IAC3B,8BAAwB,EAAE;QACxB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAe;YAAkB;YAAO;SAA4B;IACpF;IACA,4BAAsB,EAAE;QACtB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAM;YAAY;SAAU;IAC5C;IACA,6BAAuB,EAAE;QACvB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAc;YAAgB;SAAa;IAC3D;IACA,0BAAoB,EAAE;QACpB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAY;SAA4B;IACxD;AACF;AA8BO,eAAe,cACpB,MAAc,EACd,UAA4B,CAAC,CAAC;IAE9B,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IAEzC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EACJ,oCAA8B,EAC9B,YAAY,IAAI,EACjB,GAAG;IAEJ,MAAM,cAA6B;QACjC;QACA,YAAY;QACZ,UAAU;YACR;gBACE,MAAM;gBACN,SAAS;YACX;SACD;IACH;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,yCAAyC;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,aAAa;gBACb,qBAAqB;YACvB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW;QACvE;QAEA,MAAM,OAAuB,MAAM,SAAS,IAAI;QAEhD,6CAA6C;QAC7C,MAAM,cAAc,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA,UAAW,QAAQ,IAAI,KAAK;QAElE,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,YAAY,IAAI;IAEzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,cAAc;QACrC,OAAO,SAAS,MAAM,GAAG;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/app/api/claude/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { callClaudeAPI } from '@/lib/claude-api';\n\nexport async function GET() {\n  try {\n    // Simple test endpoint\n    const testPrompt = \"Hello, this is a test message. Please respond with a short greeting.\";\n    const response = await callClaudeAPI(testPrompt);\n    \n    return NextResponse.json({\n      success: true,\n      message: response,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in Claude API GET:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { prompt } = body;\n\n    if (!prompt) {\n      return NextResponse.json(\n        { error: 'Prompt is required' },\n        { status: 400 }\n      );\n    }\n\n    const response = await callClaudeAPI(prompt);\n    \n    return NextResponse.json({\n      success: true,\n      message: response,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in Claude API POST:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,uBAAuB;QACvB,MAAM,aAAa;QACnB,MAAM,WAAW,MAAM,CAAA,GAAA,6HAAA,CAAA,gBAAa,AAAD,EAAE;QAErC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,CAAA,GAAA,6HAAA,CAAA,gBAAa,AAAD,EAAE;QAErC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAE3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/claude-api.ts"],"sourcesContent":["// Available Claude models with their capabilities\nexport enum ClaudeModel {\n  SONNET_3_5 = 'claude-3-5-sonnet-20241022',\n  SONNET_3 = 'claude-3-sonnet-20240229',\n  HAIKU_3_5 = 'claude-3-5-haiku-20241022',\n  OPUS_3 = 'claude-3-opus-20240229'\n}\n\n// Model configurations for different use cases\nexport const MODEL_CONFIGS = {\n  [ClaudeModel.SONNET_3_5]: {\n    name: 'Claude 3.5 Sonnet',\n    description: 'Best for complex reasoning, coding, and analysis',\n    maxTokens: 4096,\n    recommended: ['new-project', 'html-structure', 'seo', 'tester-validator-reviewer']\n  },\n  [ClaudeModel.SONNET_3]: {\n    name: 'Claude 3 Sonnet',\n    description: 'Good balance of performance and cost',\n    maxTokens: 4096,\n    recommended: ['ui', 'composer', 'content']\n  },\n  [ClaudeModel.HAIKU_3_5]: {\n    name: 'Claude 3.5 Haiku',\n    description: 'Fastest and most cost-effective',\n    maxTokens: 4096,\n    recommended: ['researcher', 'unicalizator', 'decomposer']\n  },\n  [ClaudeModel.OPUS_3]: {\n    name: 'Claude 3 Opus',\n    description: 'Most capable for complex tasks',\n    maxTokens: 4096,\n    recommended: ['composer', 'tester-validator-reviewer']\n  }\n};\n\ninterface ClaudeMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\ninterface ClaudeRequest {\n  model: string;\n  max_tokens: number;\n  messages: ClaudeMessage[];\n}\n\ninterface ClaudeResponse {\n  content: Array<{\n    type: 'text';\n    text: string;\n  }>;\n  usage: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n}\n\nexport interface ClaudeAPIOptions {\n  model?: ClaudeModel;\n  maxTokens?: number;\n  temperature?: number;\n}\n\nexport async function callClaudeAPI(\n  prompt: string, \n  options: ClaudeAPIOptions = {}\n): Promise<string> {\n  const apiKey = process.env.CLAUDE_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('CLAUDE_API_KEY environment variable is not set');\n  }\n\n  const {\n    model = ClaudeModel.SONNET_3_5,\n    maxTokens = 4096\n  } = options;\n\n  const requestBody: ClaudeRequest = {\n    model,\n    max_tokens: maxTokens,\n    messages: [\n      {\n        role: 'user',\n        content: prompt\n      }\n    ]\n  };\n\n  try {\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Claude API error: ${response.status} - ${errorText}`);\n    }\n\n    const data: ClaudeResponse = await response.json();\n    \n    // Extract the text content from the response\n    const textContent = data.content.find(content => content.type === 'text');\n    \n    if (!textContent) {\n      throw new Error('No text content found in Claude API response');\n    }\n\n    return textContent.text;\n\n  } catch (error) {\n    console.error('Error calling Claude API:', error);\n    throw error;\n  }\n}\n\n// Utility function to test the API connection\nexport async function testClaudeConnection(): Promise<boolean> {\n  try {\n    const response = await callClaudeAPI('Hello, this is a test message.');\n    return response.length > 0;\n  } catch (error) {\n    console.error('Claude API connection test failed:', error);\n    return false;\n  }\n} "],"names":[],"mappings":"AAAA,kDAAkD;;;;;;;AAC3C,IAAA,AAAK,qCAAA;;;;;WAAA;;AAQL,MAAM,gBAAgB;IAC3B,8BAAwB,EAAE;QACxB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAe;YAAkB;YAAO;SAA4B;IACpF;IACA,4BAAsB,EAAE;QACtB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAM;YAAY;SAAU;IAC5C;IACA,6BAAuB,EAAE;QACvB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAc;YAAgB;SAAa;IAC3D;IACA,0BAAoB,EAAE;QACpB,MAAM;QACN,aAAa;QACb,WAAW;QACX,aAAa;YAAC;YAAY;SAA4B;IACxD;AACF;AA8BO,eAAe,cACpB,MAAc,EACd,UAA4B,CAAC,CAAC;IAE9B,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;IAEzC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EACJ,oCAA8B,EAC9B,YAAY,IAAI,EACjB,GAAG;IAEJ,MAAM,cAA6B;QACjC;QACA,YAAY;QACZ,UAAU;YACR;gBACE,MAAM;gBACN,SAAS;YACX;SACD;IACH;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,yCAAyC;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,aAAa;gBACb,qBAAqB;YACvB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW;QACvE;QAEA,MAAM,OAAuB,MAAM,SAAS,IAAI;QAEhD,6CAA6C;QAC7C,MAAM,cAAc,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA,UAAW,QAAQ,IAAI,KAAK;QAElE,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,YAAY,IAAI;IAEzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,cAAc;QACrC,OAAO,SAAS,MAAM,GAAG;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/services/system-prompts.ts"],"sourcesContent":["// AISEO System Prompts\n// This file contains all system prompts for different AI agents\n\n// ===== CORE PROJECT AGENTS =====\n\nexport const NEW_PROJECT_AGENT_PROMPT = `\nYou are an expert web application architect.\nBased on the following project information, design the ideal file and folder structure for a modern web project.\n\nProject name: {project_name}\nUser requirement for structure: {structure}\nSite type: {site_type}\n\nInstructions:\nUse best practices for file/folder naming (e.g., React/Next.js conventions).\nInclude top-level folders (e.g., pages, components, assets, public), and all necessary files.\nThe root folder for the project should be named simillar to project name but in kebab-case (parent folder).\nAll files and folders must be inside this parent folder.\nFor each file/folder, provide:\npath (e.g., pages/index.tsx)\ntype (e.g., page, component, asset, etc.)\ndescription (optional, 1-sentence purpose)\nIf a folder, list key child files.\nOutput should be valid JSONâ€”an array of objects, one for each file/folder.\nDo not generate any code or content, only the file/folder structure.\n`;\n\n\nexport const UI_AGENT_PROMPT = `\n// UI Agent System Prompt\n// This agent handles UI design and user interface creation\n// TODO: Add specific prompt content\n`;\n\nexport const HTML_STRUCTURE_AGENT_PROMPT = `\n// HTML/Structure Site/Page Agent System Prompt\n// This agent creates HTML structure and page layouts\n// TODO: Add specific prompt content\n`;\n\nexport const COMPOSER_AGENT_PROMPT = `\n// Composer Agent System Prompt\n// This agent composes and assembles content and components\n// TODO: Add specific prompt content\n`;\n\n// ===== VALIDATION & TESTING AGENTS =====\n\nexport const TESTER_VALIDATOR_REVIEWER_PROMPT = `\n// Tester/Validator/Reviewer Agent System Prompt\n// This agent tests, validates, and reviews generated content and code\n// TODO: Add specific prompt content\n`;\n\n// ===== CONTENT & SEO AGENTS =====\n\nexport const SEO_AGENT_PROMPT = `\n// SEO Agent System Prompt\n// This agent handles SEO optimization and analysis\n// TODO: Add specific prompt content\n`;\n\nexport const CONTENT_AGENT_PROMPT = `\n// Content Agent System Prompt\n// This agent generates and manages content\n// TODO: Add specific prompt content\n`;\n\nexport const RESEARCHER_AGENT_PROMPT = `\n// Researcher Agent System Prompt\n// This agent conducts research and gathers information\n// TODO: Add specific prompt content\n`;\n\n// ===== SPECIALIZED AGENTS =====\n\nexport const UNICALIZATOR_AGENT_PROMPT = `\n// Unicalizator Agent System Prompt\n// This agent ensures content uniqueness and originality\n// TODO: Add specific prompt content\n`;\n\nexport const DECOMPOSER_AGENT_PROMPT = `\n// Decomposer Agent System Prompt\n// This agent breaks down complex tasks into smaller components\n// TODO: Add specific prompt content\n`;\n\n// ===== UTILITY FUNCTIONS =====\n\nexport const getAgentPrompt = (agentType: string): string => {\n  const prompts: Record<string, string> = {\n    'new-project': NEW_PROJECT_AGENT_PROMPT,\n    'ui': UI_AGENT_PROMPT,\n    'html-structure': HTML_STRUCTURE_AGENT_PROMPT,\n    'composer': COMPOSER_AGENT_PROMPT,\n    'tester-validator-reviewer': TESTER_VALIDATOR_REVIEWER_PROMPT,\n    'seo': SEO_AGENT_PROMPT,\n    'content': CONTENT_AGENT_PROMPT,\n    'researcher': RESEARCHER_AGENT_PROMPT,\n    'unicalizator': UNICALIZATOR_AGENT_PROMPT,\n    'decomposer': DECOMPOSER_AGENT_PROMPT,\n  };\n\n  return prompts[agentType] || 'Agent prompt not found';\n};\n\nexport const getAgentDescription = (agentType: string): string => {\n  const descriptions: Record<string, string> = {\n    'new-project': 'Handles initial project setup and configuration',\n    'ui': 'Handles UI design and user interface creation',\n    'html-structure': 'Creates HTML structure and page layouts',\n    'composer': 'Composes and assembles content and components',\n    'tester-validator-reviewer': 'Tests, validates, and reviews generated content and code',\n    'seo': 'Handles SEO optimization and analysis',\n    'content': 'Generates and manages content',\n    'researcher': 'Conducts research and gathers information',\n    'unicalizator': 'Ensures content uniqueness and originality',\n    'decomposer': 'Breaks down complex tasks into smaller components',\n  };\n\n  return descriptions[agentType] || 'Agent description not found';\n};\n\nexport const getAllAgentTypes = (): string[] => {\n  return [\n    'new-project',\n    'ui',\n    'html-structure', \n    'composer',\n    'tester-validator-reviewer',\n    'seo',\n    'content',\n    'researcher',\n    'unicalizator',\n    'decomposer'\n  ];\n}; "],"names":[],"mappings":"AAAA,uBAAuB;AACvB,gEAAgE;AAEhE,kCAAkC;;;;;;;;;;;;;;;;AAE3B,MAAM,2BAA2B,CAAC;;;;;;;;;;;;;;;;;;;;AAoBzC,CAAC;AAGM,MAAM,kBAAkB,CAAC;;;;AAIhC,CAAC;AAEM,MAAM,8BAA8B,CAAC;;;;AAI5C,CAAC;AAEM,MAAM,wBAAwB,CAAC;;;;AAItC,CAAC;AAIM,MAAM,mCAAmC,CAAC;;;;AAIjD,CAAC;AAIM,MAAM,mBAAmB,CAAC;;;;AAIjC,CAAC;AAEM,MAAM,uBAAuB,CAAC;;;;AAIrC,CAAC;AAEM,MAAM,0BAA0B,CAAC;;;;AAIxC,CAAC;AAIM,MAAM,4BAA4B,CAAC;;;;AAI1C,CAAC;AAEM,MAAM,0BAA0B,CAAC;;;;AAIxC,CAAC;AAIM,MAAM,iBAAiB,CAAC;IAC7B,MAAM,UAAkC;QACtC,eAAe;QACf,MAAM;QACN,kBAAkB;QAClB,YAAY;QACZ,6BAA6B;QAC7B,OAAO;QACP,WAAW;QACX,cAAc;QACd,gBAAgB;QAChB,cAAc;IAChB;IAEA,OAAO,OAAO,CAAC,UAAU,IAAI;AAC/B;AAEO,MAAM,sBAAsB,CAAC;IAClC,MAAM,eAAuC;QAC3C,eAAe;QACf,MAAM;QACN,kBAAkB;QAClB,YAAY;QACZ,6BAA6B;QAC7B,OAAO;QACP,WAAW;QACX,cAAc;QACd,gBAAgB;QAChB,cAAc;IAChB;IAEA,OAAO,YAAY,CAAC,UAAU,IAAI;AACpC;AAEO,MAAM,mBAAmB;IAC9B,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/agent-executor.ts"],"sourcesContent":["import { callClaudeAPI, ClaudeModel, ClaudeAPIOptions, MODEL_CONFIGS } from './claude-api';\nimport { getAgentPrompt, getAllAgentTypes } from '@/services/system-prompts';\n\n// Agent configuration interface\nexport interface AgentConfig {\n  name: string;\n  description: string;\n  model: ClaudeModel;\n  maxTokens: number;\n  temperature?: number;\n}\n\n// Default configurations for each agent type\nexport const AGENT_CONFIGS: Record<string, AgentConfig> = {\n  'new-project': {\n    name: 'New Project Agent',\n    description: 'Handles initial project setup and file structure generation',\n    model: ClaudeModel.SONNET_3_5,\n    maxTokens: 4096,\n    temperature: 0.3\n  },\n  'ui': {\n    name: 'UI Agent',\n    description: 'Handles UI design and user interface creation',\n    model: ClaudeModel.SONNET_3,\n    maxTokens: 3000,\n    temperature: 0.5\n  },\n  'html-structure': {\n    name: 'HTML Structure Agent',\n    description: 'Creates HTML structure and page layouts',\n    model: ClaudeModel.SONNET_3_5,\n    maxTokens: 4096,\n    temperature: 0.2\n  },\n  'composer': {\n    name: 'Composer Agent',\n    description: 'Composes and assembles content and components',\n    model: ClaudeModel.OPUS_3,\n    maxTokens: 4096,\n    temperature: 0.4\n  },\n  'tester-validator-reviewer': {\n    name: 'Tester/Validator/Reviewer Agent',\n    description: 'Tests, validates, and reviews generated content and code',\n    model: ClaudeModel.SONNET_3_5,\n    maxTokens: 4096,\n    temperature: 0.1\n  },\n  'seo': {\n    name: 'SEO Agent',\n    description: 'Handles SEO optimization and analysis',\n    model: ClaudeModel.SONNET_3_5,\n    maxTokens: 3000,\n    temperature: 0.3\n  },\n  'content': {\n    name: 'Content Agent',\n    description: 'Generates and manages content',\n    model: ClaudeModel.SONNET_3,\n    maxTokens: 4096,\n    temperature: 0.6\n  },\n  'researcher': {\n    name: 'Researcher Agent',\n    description: 'Conducts research and gathers information',\n    model: ClaudeModel.HAIKU_3_5,\n    maxTokens: 3000,\n    temperature: 0.4\n  },\n  'unicalizator': {\n    name: 'Unicalizator Agent',\n    description: 'Ensures content uniqueness and originality',\n    model: ClaudeModel.HAIKU_3_5,\n    maxTokens: 2000,\n    temperature: 0.2\n  },\n  'decomposer': {\n    name: 'Decomposer Agent',\n    description: 'Breaks down complex tasks into smaller components',\n    model: ClaudeModel.HAIKU_3_5,\n    maxTokens: 2000,\n    temperature: 0.3\n  }\n};\n\n// Generic agent execution interface\nexport interface AgentExecutionOptions {\n  agentType: string;\n  userInput: Record<string, any>;\n  customPrompt?: string;\n  modelOverride?: ClaudeModel;\n  maxTokensOverride?: number;\n  temperatureOverride?: number;\n}\n\nexport interface AgentExecutionResult {\n  success: boolean;\n  response?: string;\n  error?: string;\n  metadata: {\n    agentType: string;\n    model: ClaudeModel;\n    maxTokens: number;\n    temperature?: number;\n    executionTime: number;\n    timestamp: string;\n  };\n}\n\n// Main agent executor function\nexport async function executeAgent(options: AgentExecutionOptions): Promise<AgentExecutionResult> {\n  const startTime = Date.now();\n  \n  try {\n    const { agentType, userInput, customPrompt, modelOverride, maxTokensOverride, temperatureOverride } = options;\n    \n    // Validate agent type\n    if (!getAllAgentTypes().includes(agentType)) {\n      throw new Error(`Invalid agent type: ${agentType}`);\n    }\n    \n    // Get agent configuration\n    const agentConfig = AGENT_CONFIGS[agentType];\n    if (!agentConfig) {\n      throw new Error(`No configuration found for agent: ${agentType}`);\n    }\n    \n    // Get the system prompt\n    const systemPrompt = customPrompt || getAgentPrompt(agentType);\n    if (!systemPrompt || systemPrompt === 'Agent prompt not found') {\n      throw new Error(`No system prompt found for agent: ${agentType}`);\n    }\n    \n    // Fill the prompt with user input\n    const filledPrompt = fillPromptWithUserInput(systemPrompt, userInput);\n    \n    // Prepare Claude API options\n    const claudeOptions: ClaudeAPIOptions = {\n      model: modelOverride || agentConfig.model,\n      maxTokens: maxTokensOverride || agentConfig.maxTokens,\n      temperature: temperatureOverride || agentConfig.temperature\n    };\n    \n    // Execute the agent\n    const response = await callClaudeAPI(filledPrompt, claudeOptions);\n    \n    const executionTime = Date.now() - startTime;\n    \n    return {\n      success: true,\n      response,\n      metadata: {\n        agentType,\n        model: claudeOptions.model || ClaudeModel.SONNET_3_5,\n        maxTokens: claudeOptions.maxTokens || 4096,\n        temperature: claudeOptions.temperature,\n        executionTime,\n        timestamp: new Date().toISOString()\n      }\n    };\n    \n  } catch (error) {\n    const executionTime = Date.now() - startTime;\n    \n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      metadata: {\n        agentType: options.agentType,\n        model: options.modelOverride || AGENT_CONFIGS[options.agentType]?.model || ClaudeModel.SONNET_3_5,\n        maxTokens: options.maxTokensOverride || AGENT_CONFIGS[options.agentType]?.maxTokens || 4096,\n        temperature: options.temperatureOverride || AGENT_CONFIGS[options.agentType]?.temperature,\n        executionTime,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n}\n\n// Helper function to fill prompts with user input\nfunction fillPromptWithUserInput(prompt: string, userInput: Record<string, any>): string {\n  let filledPrompt = prompt;\n  \n  // Replace common patterns\n  const replacements: Record<string, string> = {\n    '{project_name}': userInput.brand_name || userInput.project_name || 'Unknown Project',\n    '{brand_name}': userInput.brand_name || 'Unknown Brand',\n    '{target_country}': userInput.target_country || 'Unknown Country',\n    '{target_language}': userInput.target_language || 'Unknown Language',\n    '{site_type}': userInput.site_type || 'Unknown Site Type',\n    '{industry}': userInput.industry || 'Casino/Gaming'\n  };\n  \n  // Handle structure data if present\n  if (userInput.structure) {\n    const { selectedPages, pageSections, totalPages } = userInput.structure;\n    const structureInfo = `\nSite Type: ${userInput.site_type || 'Unknown'}\nTotal Pages: ${totalPages || 0}\nSelected Pages: ${selectedPages?.join(', ') || 'None'}\nPage Sections:\n${selectedPages?.map((page: string) => {\n  const sections = pageSections?.[page] || [];\n  return `- ${page}: ${sections.join(', ')}`;\n}).join('\\n') || 'No sections defined'}\nTarget Country: ${userInput.target_country || 'Unknown'}\nTarget Language: ${userInput.target_language || 'Unknown'}\nIndustry: ${userInput.industry || 'Casino/Gaming'}`;\n    \n    replacements['{structure}'] = structureInfo;\n  }\n  \n  // Apply all replacements\n  Object.entries(replacements).forEach(([key, value]) => {\n    filledPrompt = filledPrompt.replace(new RegExp(key.replace(/[{}]/g, '\\\\$&'), 'g'), value);\n  });\n  \n  return filledPrompt;\n}\n\n// Helper function to get recommended model for an agent\nexport function getRecommendedModel(agentType: string): ClaudeModel {\n  const agentConfig = AGENT_CONFIGS[agentType];\n  return agentConfig?.model || ClaudeModel.SONNET_3_5;\n}\n\n// Helper function to get all available models\nexport function getAvailableModels(): Array<{model: ClaudeModel, config: typeof MODEL_CONFIGS[ClaudeModel]}> {\n  return Object.entries(MODEL_CONFIGS).map(([model, config]) => ({\n    model: model as ClaudeModel,\n    config\n  }));\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/services/new_project_agent.ts"],"sourcesContent":["import { executeAgent, AgentExecutionResult } from '@/lib/agent-executor';\nimport { ClaudeModel } from '@/lib/claude-api';\n\nexport interface NewProjectUserInput {\n  brand_name: string;\n  target_country: string;\n  target_language: string;\n  site_type: string;\n  site_type_selected_at?: string;\n  structure?: {\n    selectedPages: string[];\n    pageSections: Record<string, string[]>;\n    totalPages: number;\n    structureCompletedAt: string;\n  };\n}\n\n// Main function to run the new project agent\nexport async function runNewProjectAgent(\n  userInput: NewProjectUserInput,\n  modelOverride?: ClaudeModel\n): Promise<AgentExecutionResult> {\n  return await executeAgent({\n    agentType: 'new-project',\n    userInput,\n    modelOverride\n  });\n}\n\n// Simple function that returns just the response string (for backward compatibility)\nexport async function runNewProjectAgentSimple(\n  userInput: NewProjectUserInput,\n  modelOverride?: ClaudeModel\n): Promise<string> {\n  const result = await runNewProjectAgent(userInput, modelOverride);\n  \n  if (!result.success) {\n    throw new Error(result.error || 'Agent execution failed');\n  }\n  \n  return result.response || '';\n}\n\n// For debugging: get the filled prompt\nexport async function getNewProjectAgentPrompt(userInput: NewProjectUserInput): Promise<string> {\n  // This is a simplified version for debugging - in production you'd use the agent executor\n  const { getAgentPrompt } = await import('./system-prompts');\n  const prompt = getAgentPrompt('new-project');\n  \n  // Basic prompt filling for debugging\n  let filledPrompt = prompt;\n  \n  // Handle structure data if present\n  if (userInput.structure) {\n    const { selectedPages, pageSections, totalPages } = userInput.structure;\n    const structureInfo = `\nSite Type: ${userInput.site_type}\nTotal Pages: ${totalPages}\nSelected Pages: ${selectedPages.join(', ')}\nPage Sections:\n${selectedPages.map(page => {\n  const sections = pageSections[page] || [];\n  return `- ${page}: ${sections.join(', ')}`;\n}).join('\\n')}\nTarget Country: ${userInput.target_country}\nTarget Language: ${userInput.target_language}\nIndustry: Casino/Gaming`;\n    \n    filledPrompt = filledPrompt.replace('{structure}', structureInfo);\n  }\n  \n  filledPrompt = filledPrompt\n    .replace('{project_name}', userInput.brand_name)\n    .replace('{site_type}', userInput.site_type);\n  \n  return filledPrompt;\n} "],"names":[],"mappings":";;;;;AAAA;;AAkBO,eAAe,mBACpB,SAA8B,EAC9B,aAA2B;IAE3B,OAAO,MAAM,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD,EAAE;QACxB,WAAW;QACX;QACA;IACF;AACF;AAGO,eAAe,yBACpB,SAA8B,EAC9B,aAA2B;IAE3B,MAAM,SAAS,MAAM,mBAAmB,WAAW;IAEnD,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,IAAI,MAAM,OAAO,KAAK,IAAI;IAClC;IAEA,OAAO,OAAO,QAAQ,IAAI;AAC5B;AAGO,eAAe,yBAAyB,SAA8B;IAC3E,0FAA0F;IAC1F,MAAM,EAAE,cAAc,EAAE,GAAG;IAC3B,MAAM,SAAS,eAAe;IAE9B,qCAAqC;IACrC,IAAI,eAAe;IAEnB,mCAAmC;IACnC,IAAI,UAAU,SAAS,EAAE;QACvB,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,UAAU,SAAS;QACvE,MAAM,gBAAgB,CAAC;WAChB,EAAE,UAAU,SAAS,CAAC;aACpB,EAAE,WAAW;gBACV,EAAE,cAAc,IAAI,CAAC,MAAM;;AAE3C,EAAE,cAAc,GAAG,CAAC,CAAA;YAClB,MAAM,WAAW,YAAY,CAAC,KAAK,IAAI,EAAE;YACzC,OAAO,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,SAAS,IAAI,CAAC,OAAO;QAC5C,GAAG,IAAI,CAAC,MAAM;gBACE,EAAE,UAAU,cAAc,CAAC;iBAC1B,EAAE,UAAU,eAAe,CAAC;uBACtB,CAAC;QAEpB,eAAe,aAAa,OAAO,CAAC,eAAe;IACrD;IAEA,eAAe,aACZ,OAAO,CAAC,kBAAkB,UAAU,UAAU,EAC9C,OAAO,CAAC,eAAe,UAAU,SAAS;IAE7C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/app/api/claude/new-project/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { runNewProjectAgent, getNewProjectAgentPrompt, type NewProjectUserInput } from '@/services/new_project_agent';\nimport { ClaudeModel } from '@/lib/claude-api';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userInput, modelOverride } = body;\n\n    if (!userInput) {\n      return NextResponse.json(\n        { error: 'userInput is required' },\n        { status: 400 }\n      );\n    }\n\n    // Validate required fields\n    if (!userInput.brand_name || !userInput.target_country || !userInput.target_language || !userInput.site_type) {\n      return NextResponse.json(\n        { error: 'Missing required fields: brand_name, target_country, target_language, site_type' },\n        { status: 400 }\n      );\n    }\n\n    // Run the new project agent with the new system\n    const result = await runNewProjectAgent(userInput, modelOverride);\n    \n    // Get the filled prompt for debugging\n    const filledPrompt = await getNewProjectAgentPrompt(userInput);\n    \n    return NextResponse.json({\n      ...result,\n      filledPrompt,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in new-project agent:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// GET endpoint for testing with sample data\nexport async function GET() {\n  try {\n    const sampleUserInput: NewProjectUserInput = {\n      brand_name: 'SuperCasino',\n      target_country: 'United States',\n      target_language: 'English',\n      site_type: 'multi-page',\n      structure: {\n        selectedPages: ['Home', 'Reviews', 'Bonuses', 'FAQ'],\n        pageSections: {\n          'Home': ['Hero Banner', 'Why Choose Us', 'Featured Games', 'Footer'],\n          'Reviews': ['Review Headline', 'Rating Summary Box', 'Detailed Reviews'],\n          'Bonuses': ['Bonuses Headline', 'Top Bonus Offers Table', 'Bonus Terms'],\n          'FAQ': ['FAQ Headline', 'Categorized Q&A Blocks']\n        },\n        totalPages: 4,\n        structureCompletedAt: new Date().toISOString()\n      }\n    };\n\n    const result = await runNewProjectAgent(sampleUserInput);\n    const filledPrompt = await getNewProjectAgentPrompt(sampleUserInput);\n    \n    return NextResponse.json({\n      ...result,\n      filledPrompt,\n      sampleInput: sampleUserInput,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in new-project agent test:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG;QAErC,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,IAAI,CAAC,UAAU,UAAU,IAAI,CAAC,UAAU,cAAc,IAAI,CAAC,UAAU,eAAe,IAAI,CAAC,UAAU,SAAS,EAAE;YAC5G,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkF,GAC3F;gBAAE,QAAQ;YAAI;QAElB;QAEA,gDAAgD;QAChD,MAAM,SAAS,MAAM,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE,WAAW;QAEnD,sCAAsC;QACtC,MAAM,eAAe,MAAM,CAAA,GAAA,sIAAA,CAAA,2BAAwB,AAAD,EAAE;QAEpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,GAAG,MAAM;YACT;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,kBAAuC;YAC3C,YAAY;YACZ,gBAAgB;YAChB,iBAAiB;YACjB,WAAW;YACX,WAAW;gBACT,eAAe;oBAAC;oBAAQ;oBAAW;oBAAW;iBAAM;gBACpD,cAAc;oBACZ,QAAQ;wBAAC;wBAAe;wBAAiB;wBAAkB;qBAAS;oBACpE,WAAW;wBAAC;wBAAmB;wBAAsB;qBAAmB;oBACxE,WAAW;wBAAC;wBAAoB;wBAA0B;qBAAc;oBACxE,OAAO;wBAAC;wBAAgB;qBAAyB;gBACnD;gBACA,YAAY;gBACZ,sBAAsB,IAAI,OAAO,WAAW;YAC9C;QACF;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,sIAAA,CAAA,qBAAkB,AAAD,EAAE;QACxC,MAAM,eAAe,MAAM,CAAA,GAAA,sIAAA,CAAA,2BAAwB,AAAD,EAAE;QAEpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,GAAG,MAAM;YACT;YACA,aAAa;YACb,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAElD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
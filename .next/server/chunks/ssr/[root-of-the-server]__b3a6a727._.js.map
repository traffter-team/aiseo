{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/db/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Database types\nexport interface Database {\n  public: {\n    Tables: {\n      casino_submissions: {\n        Row: {\n          id: string;\n          brand_name: string;\n          target_country: string;\n          target_language: string;\n          created_at: string;\n          updated_at: string;\n        };\n        Insert: {\n          id?: string;\n          brand_name: string;\n          target_country: string;\n          target_language: string;\n          created_at?: string;\n          updated_at?: string;\n        };\n        Update: {\n          id?: string;\n          brand_name?: string;\n          target_country?: string;\n          target_language?: string;\n          created_at?: string;\n          updated_at?: string;\n        };\n      };\n    };\n  };\n}\n\n// Typed Supabase client\nexport const typedSupabase = createClient<Database>(supabaseUrl, supabaseAnonKey); "],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAqC3C,MAAM,gBAAgB,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAY,aAAa","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/lib/db/queries.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport type { \n  Project, \n  CreateProject, \n  ProjectFile, \n  CreateProjectFile,\n  AgentTask,\n  CreateAgentTask,\n  ProjectVersion,\n  CreateProjectVersion,\n  ErrorLog,\n  CreateErrorLog,\n  LibraryItem,\n  CreateLibraryItem,\n  Edit,\n  CreateEdit,\n  Asset,\n  CreateAsset,\n  SeoReport,\n  CreateSeoReport,\n  OrchestratorLog,\n  CreateOrchestratorLog\n} from './types';\n\n// ===== PROJECTS =====\nexport async function createProject(data: CreateProject): Promise<Project | null> {\n  try {\n    const { data: project, error } = await supabase\n      .from('projects')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating project:', error);\n      throw error;\n    }\n\n    return project;\n  } catch (error) {\n    console.error('Failed to create project:', error);\n    return null;\n  }\n}\n\nexport async function getProjects(): Promise<Project[]> {\n  try {\n    const { data: projects, error } = await supabase\n      .from('projects')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching projects:', error);\n      throw error;\n    }\n\n    return projects || [];\n  } catch (error) {\n    console.error('Failed to fetch projects:', error);\n    return [];\n  }\n}\n\nexport async function getProjectById(id: string): Promise<Project | null> {\n  try {\n    const { data: project, error } = await supabase\n      .from('projects')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      console.error('Error fetching project:', error);\n      throw error;\n    }\n\n    return project;\n  } catch (error) {\n    console.error('Failed to fetch project:', error);\n    return null;\n  }\n}\n\nexport async function updateProject(id: string, data: Partial<CreateProject>): Promise<Project | null> {\n  try {\n    const { data: project, error } = await supabase\n      .from('projects')\n      .update(data)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error updating project:', error);\n      throw error;\n    }\n\n    return project;\n  } catch (error) {\n    console.error('Failed to update project:', error);\n    return null;\n  }\n}\n\n// ===== PROJECT FILES =====\nexport async function createProjectFile(data: CreateProjectFile): Promise<ProjectFile | null> {\n  try {\n    const { data: file, error } = await supabase\n      .from('project_files')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating project file:', error);\n      throw error;\n    }\n\n    return file;\n  } catch (error) {\n    console.error('Failed to create project file:', error);\n    return null;\n  }\n}\n\nexport async function getProjectFiles(projectId: string): Promise<ProjectFile[]> {\n  try {\n    const { data: files, error } = await supabase\n      .from('project_files')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching project files:', error);\n      throw error;\n    }\n\n    return files || [];\n  } catch (error) {\n    console.error('Failed to fetch project files:', error);\n    return [];\n  }\n}\n\n// ===== AGENT TASKS =====\nexport async function createAgentTask(data: CreateAgentTask): Promise<AgentTask | null> {\n  try {\n    const { data: task, error } = await supabase\n      .from('agent_tasks')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating agent task:', error);\n      throw error;\n    }\n\n    return task;\n  } catch (error) {\n    console.error('Failed to create agent task:', error);\n    return null;\n  }\n}\n\nexport async function getAgentTasks(projectId: string): Promise<AgentTask[]> {\n  try {\n    const { data: tasks, error } = await supabase\n      .from('agent_tasks')\n      .select('*')\n      .eq('project_id', projectId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching agent tasks:', error);\n      throw error;\n    }\n\n    return tasks || [];\n  } catch (error) {\n    console.error('Failed to fetch agent tasks:', error);\n    return [];\n  }\n}\n\n// ===== PROJECT VERSIONS =====\nexport async function createProjectVersion(data: CreateProjectVersion): Promise<ProjectVersion | null> {\n  try {\n    const { data: version, error } = await supabase\n      .from('project_versions')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating project version:', error);\n      throw error;\n    }\n\n    return version;\n  } catch (error) {\n    console.error('Failed to create project version:', error);\n    return null;\n  }\n}\n\n// ===== ERROR LOGS =====\nexport async function createErrorLog(data: CreateErrorLog): Promise<ErrorLog | null> {\n  try {\n    const { data: errorLog, error } = await supabase\n      .from('error_log')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating error log:', error);\n      throw error;\n    }\n\n    return errorLog;\n  } catch (error) {\n    console.error('Failed to create error log:', error);\n    return null;\n  }\n}\n\n// ===== LIBRARY =====\nexport async function createLibraryItem(data: CreateLibraryItem): Promise<LibraryItem | null> {\n  try {\n    const { data: item, error } = await supabase\n      .from('library')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating library item:', error);\n      throw error;\n    }\n\n    return item;\n  } catch (error) {\n    console.error('Failed to create library item:', error);\n    return null;\n  }\n}\n\n// ===== EDITS =====\nexport async function createEdit(data: CreateEdit): Promise<Edit | null> {\n  try {\n    const { data: edit, error } = await supabase\n      .from('edits')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating edit:', error);\n      throw error;\n    }\n\n    return edit;\n  } catch (error) {\n    console.error('Failed to create edit:', error);\n    return null;\n  }\n}\n\n// ===== ASSETS =====\nexport async function createAsset(data: CreateAsset): Promise<Asset | null> {\n  try {\n    const { data: asset, error } = await supabase\n      .from('assets')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating asset:', error);\n      throw error;\n    }\n\n    return asset;\n  } catch (error) {\n    console.error('Failed to create asset:', error);\n    return null;\n  }\n}\n\n// ===== SEO REPORTS =====\nexport async function createSeoReport(data: CreateSeoReport): Promise<SeoReport | null> {\n  try {\n    const { data: report, error } = await supabase\n      .from('seo_reports')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating SEO report:', error);\n      throw error;\n    }\n\n    return report;\n  } catch (error) {\n    console.error('Failed to create SEO report:', error);\n    return null;\n  }\n}\n\n// ===== ORCHESTRATOR LOGS =====\nexport async function createOrchestratorLog(data: CreateOrchestratorLog): Promise<OrchestratorLog | null> {\n  try {\n    const { data: log, error } = await supabase\n      .from('orchestrator_logs')\n      .insert([data])\n      .select()\n      .single();\n\n    if (error) {\n      console.error('Error creating orchestrator log:', error);\n      throw error;\n    }\n\n    return log;\n  } catch (error) {\n    console.error('Failed to create orchestrator log:', error);\n    return null;\n  }\n}\n\n// Legacy function for backward compatibility (can be removed later)\nexport async function createCasinoSubmission(data: any): Promise<any> {\n  console.warn('createCasinoSubmission is deprecated. Use createProject instead.');\n  return createProject({\n    status: 'created',\n    state: 'initial',\n    user_input: data,\n    meta: null,\n    output_refs: null\n  });\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///Users/vkyrychenko/Desktop/aiseo/src/app/web-ui/main-page/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { createProject, updateProject, getProjectById } from '@/lib/db/queries';\nimport { pageLibrary, getAvailablePages, getPageTemplate, type PageTemplate, type Section } from '@/lib/page-library';\n\nconst countries = [\n  { name: 'United States', code: 'US' },\n  { name: 'United Kingdom', code: 'UK' },\n  { name: 'Canada', code: 'CA' },\n  { name: 'Australia', code: 'AU' },\n  { name: 'Germany', code: 'DE' },\n  { name: 'France', code: 'FR' },\n  { name: 'Spain', code: 'ES' },\n  { name: 'Italy', code: 'IT' },\n  { name: 'Sweden', code: 'SE' },\n  { name: 'Norway', code: 'NO' },\n  // Add more as needed\n];\n\nconst languages = [\n  { name: 'English', code: 'EN' },\n  { name: 'Spanish', code: 'ES' },\n  { name: 'French', code: 'FR' },\n  { name: 'German', code: 'DE' },\n  { name: 'Italian', code: 'IT' },\n  { name: 'Swedish', code: 'SV' },\n  { name: 'Norwegian', code: 'NO' },\n  // Add more as needed\n];\n\nconst siteTypes = [\n  { name: 'Single Page', value: 'single-page' },\n  { name: 'Multi Page', value: 'multi-page' },\n];\n\nconst MainPage: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState<'initial' | 'site-type' | 'structure'>('initial');\n  const [showMessage, setShowMessage] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [createdProjectId, setCreatedProjectId] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    brand_name: '',\n    target_country: '',\n    target_language: ''\n  });\n  const [siteTypeData, setSiteTypeData] = useState({\n    site_type: ''\n  });\n  const [structureData, setStructureData] = useState({\n    selectedPages: [] as string[],\n    pageSections: {} as Record<string, string[]> // pageKey -> selected section names\n  });\n\n  // Function to generate project name\n  const generateProjectName = (brandName: string, country: string, language: string): string => {\n    const countryCode = countries.find(c => c.name === country)?.code || 'XX';\n    const languageCode = languages.find(l => l.name === language)?.code || 'XX';\n    const date = new Date().toISOString().split('T')[0].replace(/-/g, ''); // YYYYMMDD format\n    \n    // Clean brand name (remove special characters, replace spaces with hyphens)\n    const cleanBrandName = brandName\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .substring(0, 20); // Limit length\n    \n    return `${cleanBrandName}-${countryCode}-${languageCode}-${date}`;\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSiteTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setSiteTypeData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handlePageSelection = (pageKey: string, isSelected: boolean) => {\n    setStructureData(prev => {\n      const newSelectedPages = isSelected \n        ? [...prev.selectedPages, pageKey]\n        : prev.selectedPages.filter(p => p !== pageKey);\n      \n      return {\n        ...prev,\n        selectedPages: newSelectedPages\n      };\n    });\n  };\n\n  const handleSectionSelection = (pageKey: string, sectionName: string, isSelected: boolean) => {\n    setStructureData(prev => {\n      const currentSections = prev.pageSections[pageKey] || [];\n      const newSections = isSelected\n        ? [...currentSections, sectionName]\n        : currentSections.filter(s => s !== sectionName);\n      \n      return {\n        ...prev,\n        pageSections: {\n          ...prev.pageSections,\n          [pageKey]: newSections\n        }\n      };\n    });\n  };\n\n  const handleStructureSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (!createdProjectId) {\n        throw new Error('No project ID found');\n      }\n\n      // Get current project to preserve existing meta data\n      const currentProject = await getProjectById(createdProjectId);\n      if (!currentProject) {\n        throw new Error('Project not found');\n      }\n\n      // Prepare structure data\n      const structureInfo = {\n        selectedPages: structureData.selectedPages,\n        pageSections: structureData.pageSections,\n        totalPages: siteTypeData.site_type === 'single-page' ? 1 : structureData.selectedPages.length + 1, // +1 for Home\n        structureCompletedAt: new Date().toISOString()\n      };\n\n      // Merge existing meta with structure data\n      const existingMeta = currentProject.meta || {};\n      const updatedMeta = {\n        ...existingMeta,\n        structure: structureInfo\n      };\n\n      // Update project with structure data\n      const updateData = {\n        state: 'ready-for-generation',\n        meta: updatedMeta\n      };\n\n      const result = await updateProject(createdProjectId, updateData);\n      \n      if (result) {\n        setShowMessage(true);\n        // Reset form and go back to initial step\n        setFormData({\n          brand_name: '',\n          target_country: '',\n          target_language: ''\n        });\n        setSiteTypeData({\n          site_type: ''\n        });\n        setStructureData({\n          selectedPages: [],\n          pageSections: {}\n        });\n        setCurrentStep('initial');\n        setCreatedProjectId(null);\n        \n        // Hide message after 3 seconds\n        setTimeout(() => {\n          setShowMessage(false);\n        }, 3000);\n      } else {\n        alert('Failed to update project. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting structure:', error);\n      alert('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInitialSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // Generate project name\n      const projectName = generateProjectName(\n        formData.brand_name,\n        formData.target_country,\n        formData.target_language\n      );\n\n      // Create project with the new structure\n      const projectData = {\n        status: 'created' as const,\n        state: 'site-type-selection',\n        user_input: formData, // Store form data in user_input JSONB\n        meta: {\n          form_version: '1.0',\n          submitted_at: new Date().toISOString(),\n          project_name: projectName\n        },\n        output_refs: null\n      };\n\n      const result = await createProject(projectData);\n      \n      if (result) {\n        setCreatedProjectId(result.id);\n        setCurrentStep('site-type');\n        setShowMessage(true);\n        \n        // Hide message after 3 seconds\n        setTimeout(() => {\n          setShowMessage(false);\n        }, 3000);\n      } else {\n        alert('Failed to save project. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      alert('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSiteTypeSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (!createdProjectId) {\n        throw new Error('No project ID found');\n      }\n\n      // First, get the current project to preserve existing meta data\n      const currentProject = await getProjectById(createdProjectId);\n      if (!currentProject) {\n        throw new Error('Project not found');\n      }\n\n      // Merge existing meta with new site type data\n      const existingMeta = currentProject.meta || {};\n      const updatedMeta = {\n        ...existingMeta,\n        site_type: siteTypeData.site_type,\n        site_type_selected_at: new Date().toISOString()\n      };\n\n      // Update project with merged meta data\n      const updateData = {\n        state: 'ready-for-generation',\n        meta: updatedMeta\n      };\n\n      const result = await updateProject(createdProjectId, updateData);\n      \n      if (result) {\n        setCurrentStep('structure');\n      } else {\n        alert('Failed to update project. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting site type:', error);\n      alert('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderInitialForm = () => (\n    <form onSubmit={handleInitialSubmit} className=\"w-full max-w-sm space-y-6 bg-slate-50 p-8 rounded shadow\">\n      <div>\n        <label htmlFor=\"brand_name\" className=\"block text-sm font-medium text-slate-700 mb-1\">\n          Casino Brand Name\n        </label>\n        <input\n          id=\"brand_name\"\n          name=\"brand_name\"\n          type=\"text\"\n          required\n          value={formData.brand_name}\n          onChange={handleInputChange}\n          className=\"block w-full px-4 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"Enter casino brand name\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"target_country\" className=\"block text-sm font-medium text-slate-700 mb-1\">\n          Target Country\n        </label>\n        <select\n          id=\"target_country\"\n          name=\"target_country\"\n          required\n          value={formData.target_country}\n          onChange={handleInputChange}\n          className=\"block w-full px-4 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">\n            Select a country\n          </option>\n          {countries.map((country) => (\n            <option key={country.code} value={country.name}>\n              {country.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label htmlFor=\"target_language\" className=\"block text-sm font-medium text-slate-700 mb-1\">\n          Target Language\n        </label>\n        <select\n          id=\"target_language\"\n          name=\"target_language\"\n          required\n          value={formData.target_language}\n          onChange={handleInputChange}\n          className=\"block w-full px-4 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">\n            Select a language\n          </option>\n          {languages.map((language) => (\n            <option key={language.code} value={language.name}>\n              {language.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <button\n        type=\"submit\"\n        disabled={isLoading}\n        className=\"w-full bg-blue-600 text-white py-2 rounded font-semibold hover:bg-blue-700 transition-colors disabled:bg-blue-400 disabled:cursor-not-allowed\"\n      >\n        {isLoading ? 'Creating Project...' : 'Submit'}\n      </button>\n    </form>\n  );\n\n  const renderSiteTypeForm = () => (\n    <form onSubmit={handleSiteTypeSubmit} className=\"w-full max-w-sm space-y-6 bg-slate-50 p-8 rounded shadow\">\n      <div className=\"text-center mb-6\">\n        <h2 className=\"text-xl font-semibold text-slate-800 mb-2\">\n          Choose Site Type\n        </h2>\n        <p className=\"text-slate-600\">\n          Select the type of website you want to generate\n        </p>\n      </div>\n      \n      <div>\n        <label htmlFor=\"site_type\" className=\"block text-sm font-medium text-slate-700 mb-1\">\n          Site Type\n        </label>\n        <select\n          id=\"site_type\"\n          name=\"site_type\"\n          required\n          value={siteTypeData.site_type}\n          onChange={handleSiteTypeChange}\n          className=\"block w-full px-4 py-2 border border-slate-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">\n            Select site type\n          </option>\n          {siteTypes.map((type) => (\n            <option key={type.value} value={type.value}>\n              {type.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      \n      <button\n        type=\"submit\"\n        disabled={isLoading}\n        className=\"w-full bg-blue-600 text-white py-2 rounded font-semibold hover:bg-blue-700 transition-colors disabled:bg-blue-400 disabled:cursor-not-allowed\"\n      >\n        {isLoading ? 'Updating Project...' : 'Continue'}\n      </button>\n    </form>\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-white\">\n      <h1 className=\"text-5xl font-bold mb-12 text-center\">SEO GEN</h1>\n      \n      {showMessage && (\n        <div className=\"mb-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded\">\n          {currentStep === 'initial' ? 'Project created successfully!' : 'Project updated successfully!'}\n        </div>\n      )}\n      \n      {currentStep === 'initial' ? renderInitialForm() : renderSiteTypeForm()}\n    </div>\n  );\n};\n\nexport default MainPage; "],"names":[],"mappings":"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","debugId":null}}]
}